!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddAtom	../molecule.cpp	/^void Molecule::AddAtom (Atom * atom) {$/;"	f	class:Molecule
AddBond	../bondgraph.cpp	/^Bond * BondGraph::AddBond (const AtomNode * u, const AtomNode * v, double length) {$/;"	f	class:BondGraph
AddEdge	../graph.cpp	/^Edge * Graph::AddEdge (Node * u, Node * v) {$/;"	f	class:Graph
AddEdge	../node.cpp	/^void Node::AddEdge (Edge * e) {$/;"	f	class:Node
AddNode	../graph.cpp	/^Node * Graph::AddNode () {$/;"	f	class:Graph
AdjacencyMatrix	../adjacencymatrix.cpp	/^AdjacencyMatrix::AdjacencyMatrix () : _size(0) {$/;"	f	class:AdjacencyMatrix
AdjacencyMatrix	../adjacencymatrix.cpp	/^AdjacencyMatrix::AdjacencyMatrix (const Atom_ptr_vec& atoms) :$/;"	f	class:AdjacencyMatrix
Adjacent	../graph.cpp	/^Node * Graph::Adjacent (const Node const * u, const Edge const * e) const {$/;"	f	class:Graph
AdjacentNodes	../graph.cpp	/^Node_ptr_list Graph::AdjacentNodes (const Node const * u) const {$/;"	f	class:Graph
AmberSystem	../ambersystem.cpp	/^AmberSystem::AmberSystem (string prmtop, string mdcrd, string mdvel = "")$/;"	f	class:AmberSystem
Atom	../atom.cpp	/^Atom::Atom () :$/;"	f	class:Atom
Atom	../atom.cpp	/^Atom::Atom (VecR position) :$/;"	f	class:Atom
Atom	../atom.cpp	/^Atom::Atom (const Atom& oldAtom) :$/;"	f	class:Atom
Atom	../atom.cpp	/^Atom::Atom (std::string name, VecR position) :$/;"	f	class:Atom
Atom	../atom.cpp	/^Atom::Atom (std::string name, VecR position, VecR force) :$/;"	f	class:Atom
Beta	../watersfg.cpp	/^std::vector< std::complex<double> >& SFGCalculator::Beta (Water& water, const int s1, const int s2, const int p) {$/;"	f	class:SFGCalculator
Bisector	../h2o.cpp	/^VecR Water::Bisector () {$/;"	f	class:Water
Bond	../bond.cpp	/^Bond::Bond () : bond(unbonded) {$/;"	f	class:Bond
Bond	../bond.cpp	/^Bond::Bond (double length, bondtype btype) : bondlength(length), bond(btype) {$/;"	f	class:Bond
BondGraph	../bondgraph.cpp	/^BondGraph::BondGraph () {$/;"	f	class:BondGraph
BondGraph	../bondgraph.cpp	/^BondGraph::BondGraph (Atom_ptr_vec& atoms) {$/;"	f	class:BondGraph
BondedAtoms	../adjacencymatrix.cpp	/^Atom_ptr_vec AdjacencyMatrix::BondedAtoms (Atom const * const ap) const {$/;"	f	class:AdjacencyMatrix
BondedAtoms	../adjacencymatrix.cpp	/^Atom_ptr_vec AdjacencyMatrix::BondedAtoms (Atom const * const ap, bondtype const b) const {$/;"	f	class:AdjacencyMatrix
Bonds	../adjacencymatrix.cpp	/^Bond_ptr_vec AdjacencyMatrix::Bonds (Atom const * const ap) const {$/;"	f	class:AdjacencyMatrix
BoxFiller	../boxfiller.cpp	/^BoxFiller::BoxFiller (string paramfile, string pdbfile, double spacing) : _pdb(PDBFile(pdbfile)) {$/;"	f	class:BoxFiller
BuildMatrix	../adjacencymatrix.cpp	/^void AdjacencyMatrix::BuildMatrix () {$/;"	f	class:AdjacencyMatrix
CRDFile	../crdfile.cpp	/^CRDFile::CRDFile (std::string crdpath, int size) :$/;"	f	class:CRDFile
CalcDipole	../h2o.cpp	/^void Water::CalcDipole () {$/;"	f	class:Water
CalcDipole	../molecule.cpp	/^void Molecule::CalcDipole () {$/;"	f	class:Molecule
CalcEigenSystem	../matrixr.cpp	/^void MatR::CalcEigenSystem () {$/;"	f	class:MatR
CalcEulerAngles	../h2o.cpp	/^void Water::CalcEulerAngles (const coord axis) {$/;"	f	class:Water
CalcNO2Dipole	../hno3.cpp	/^bool NitricAcid::CalcNO2Dipole () {$/;"	f	class:NitricAcid
Clear	../graph.cpp	/^void Graph::Clear () {$/;"	f	class:Graph
ClearBonds	../adjacencymatrix.cpp	/^void AdjacencyMatrix::ClearBonds () {$/;"	f	class:AdjacencyMatrix
ClosestAtoms	../connectmatrix.cpp	/^std::vector<Atom *> ConnectivityMatrix::ClosestAtoms (const int input, const string atomname, const int number) const {$/;"	f	class:ConnectivityMatrix
ComplexDataFile	../complexdatafile.cpp	/^ComplexDataFile::ComplexDataFile (const char * pathname) {$/;"	f	class:ComplexDataFile
ConnectivityMatrix	../connectmatrix.cpp	/^ConnectivityMatrix::ConnectivityMatrix (std::vector<Atom *>& atoms) : _atoms(atoms) {$/;"	f	class:ConnectivityMatrix
CoordName	../connectmatrix.cpp	/^const string CoordName (coordination coord) {$/;"	f
CouplingConstant	../watersfg.cpp	/^double SFGCalculator::CouplingConstant (Water& water) const {$/;"	f	class:SFGCalculator
CovalentBonds	../connectmatrix.cpp	/^std::vector<Atom *> ConnectivityMatrix::CovalentBonds (const Atom * atom) const {$/;"	f	class:ConnectivityMatrix
DCMToLab	../h2o.cpp	/^MatR const & Water::DCMToLab (const coord axis) {$/;"	f	class:Water
DCMToLabMorita	../h2o.cpp	/^MatR const & Water::DCMToLabMorita (const coord axis) {$/;"	f	class:Water
DCMToLabOrder	../h2o.cpp	/^MatR const & Water::DCMToLabOrder () {$/;"	f	class:Water
DataPoint	../complexdatafile.cpp	/^std::complex<double> ComplexDataFile::DataPoint (const double data) {$/;"	f	class:ComplexDataFile
DeleteMatrix	../adjacencymatrix.cpp	/^void AdjacencyMatrix::DeleteMatrix () {$/;"	f	class:AdjacencyMatrix
Determinant	../matrixr.cpp	/^double MatR::Determinant () const {$/;"	f	class:MatR
Diagonalize	../matrixr.cpp	/^MatR MatR::Diagonalize () {$/;"	f	class:MatR
DipoleFieldTensor	../dipolefieldtensor.cpp	/^DipoleFieldTensor::DipoleFieldTensor (double const * const r) {$/;"	f	class:DipoleFieldTensor
DipolePotential	../watersfg.cpp	/^double SFGCalculator::DipolePotential (const VecR& muA, const VecR& muB, const VecR& R) {$/;"	f	class:SFGCalculator
Distance	../connectmatrix.cpp	/^double ConnectivityMatrix::Distance (const Atom * atom1, const Atom * atom2) const {$/;"	f	class:ConnectivityMatrix
Edge	../edge.cpp	/^Edge::Edge () {$/;"	f	class:Edge
Edge	../edge.cpp	/^Edge::Edge (Node * i, Node * j) {$/;"	f	class:Edge
Edge	../graph.cpp	/^Edge * Graph::Edge (Node * u, Node * v) {$/;"	f	class:Graph
EigenValues	../matrixr.cpp	/^vector< complex<double> > MatR::EigenValues () {$/;"	f	class:MatR
EigenVectors	../matrixr.cpp	/^vector<VecR> MatR::EigenVectors () {$/;"	f	class:MatR
FindBond	../bondgraph.cpp	/^Bond * BondGraph::FindBond (const Atom * x, const Atom * y) const {$/;"	f	class:BondGraph
FindFlag	../topfile.cpp	/^void TOPFile::FindFlag (std::string flag) {$/;"	f	class:TOPFile
FindInterfacialWaters	../watersystem.cpp	/^void WaterSystem::FindInterfacialWaters () {$/;"	f	class:WaterSystem
FindWaterCoordination	../connectmatrix.cpp	/^coordination ConnectivityMatrix::FindWaterCoordination (const Water& water) const {$/;"	f	class:ConnectivityMatrix
FindWaters	../watersystem.cpp	/^void WaterSystem::FindWaters () {$/;"	f	class:WaterSystem
ForceFile	../forcefile.cpp	/^ForceFile::ForceFile (std::string forcepath, int size) :$/;"	f	class:ForceFile
FreqShift	../watersfg.cpp	/^void SFGCalculator::FreqShift (Water& water) {$/;"	f	class:SFGCalculator
GetAtom	../molecule.cpp	/^Atom * Molecule::GetAtom (const string atomname) const {$/;"	f	class:Molecule
Graph	../graph.cpp	/^Graph::Graph () {$/;"	f	class:Graph
HBonds	../adjacencymatrix.cpp	/^Bond_ptr_vec AdjacencyMatrix::HBonds (Atom const * const ap) const {$/;"	f	class:AdjacencyMatrix
Histogram	../histogram.cpp	/^Histogram::Histogram (double const min, double const max, double binsize) {$/;"	f	class:Histogram
Histogram	../histogram.cpp	/^Histogram::Histogram (double const min, double const max, int numbins) {$/;"	f	class:Histogram
Hydronium	../h2o.cpp	/^Hydronium::Hydronium () {$/;"	f	class:Hydronium
Hydroxide	../h2o.cpp	/^Hydroxide::Hydroxide () {$/;"	f	class:Hydroxide
ID	../adjacencymatrix.cpp	/^int AdjacencyMatrix::ID (Atom const * const ap) const {$/;"	f	class:AdjacencyMatrix
Index	../matrixr.cpp	/^double MatR::Index (int const row, int const col) const {	\/\/ Return the element$/;"	f	class:MatR
Inverse	../matrixr.cpp	/^MatR MatR::Inverse () const {$/;"	f	class:MatR
LoadFirst	../ambersystem.cpp	/^void AmberSystem::LoadFirst () {$/;"	f	class:AmberSystem
LoadFirst	../crdfile.cpp	/^void CRDFile::LoadFirst() {$/;"	f	class:CRDFile
LoadFirst	../forcefile.cpp	/^void ForceFile::LoadFirst() {$/;"	f	class:ForceFile
LoadFirst	../pdbfile.cpp	/^void PDBFile::LoadFirst() {$/;"	f	class:PDBFile
LoadFirst	../wannier.cpp	/^void WannierFile::LoadFirst() {$/;"	f	class:WannierFile
LoadFirst	../xyzfile.cpp	/^void XYZFile::LoadFirst() {$/;"	f	class:XYZFile
LoadFirst	../xyzsystem.cpp	/^void XYZSystem::LoadFirst () {$/;"	f	class:XYZSystem
LoadLast	../pdbfile.cpp	/^void PDBFile::LoadLast () {$/;"	f	class:PDBFile
LoadNext	../ambersystem.cpp	/^void AmberSystem::LoadNext () {$/;"	f	class:AmberSystem
LoadNext	../crdfile.cpp	/^void CRDFile::LoadNext () {$/;"	f	class:CRDFile
LoadNext	../forcefile.cpp	/^void ForceFile::LoadNext () {$/;"	f	class:ForceFile
LoadNext	../pdbfile.cpp	/^void PDBFile::LoadNext () {$/;"	f	class:PDBFile
LoadNext	../wannier.cpp	/^void WannierFile::LoadNext () {$/;"	f	class:WannierFile
LoadNext	../xyzfile.cpp	/^void XYZFile::LoadNext () {$/;"	f	class:XYZFile
LoadNext	../xyzsystem.cpp	/^void XYZSystem::LoadNext () {$/;"	f	class:XYZSystem
LoadSection	../topfile.cpp	/^void TOPFile::LoadSection(std::string flag) {$/;"	f	class:TOPFile
Magnitude	../vecr.cpp	/^double VecR::Magnitude () const {$/;"	f	class:VecR
Merge	../molecule.cpp	/^Molecule * Molecule::Merge (Molecule * mol) {$/;"	f	class:Molecule
MinDistance	../atom.cpp	/^double Atom::MinDistance (Atom const * const input) const {$/;"	f	class:Atom
MinDistance	../atom.cpp	/^double Atom::MinDistance (const Atom& input) const {$/;"	f	class:Atom
MinDistance	../molecule.cpp	/^double Molecule::MinDistance (Molecule& mol) {$/;"	f	class:Molecule
MinDistance	../vecr.cpp	/^double VecR::MinDistance (const VecR& input, const VecR& size) const {$/;"	f	class:VecR
MinVector	../vecr.cpp	/^VecR VecR::MinVector (const VecR& input, const VecR& size) const {$/;"	f	class:VecR
MolecularPlaneVector	../hno3.cpp	/^VecR NitricAcid::MolecularPlaneVector () {$/;"	f	class:NitricAcid
Molecule	../molecule.cpp	/^Molecule::Molecule () :$/;"	f	class:Molecule
Molecule	../molecule.cpp	/^Molecule::Molecule (const Molecule& oldMol) :$/;"	f	class:Molecule
MoleculeDensity	../density.cpp	/^vector<int> MoleculeDensity ( AmberSystem& sys, double const start, double const end, double const binsize, const coord axis, string atomname) {$/;"	f
NO2Bisector	../hno3.cpp	/^VecR NitricAcid::NO2Bisector () {$/;"	f	class:NitricAcid
Nitrate	../hno3.cpp	/^Nitrate::Nitrate () {$/;"	f	class:Nitrate
NitricAcid	../hno3.cpp	/^NitricAcid::NitricAcid () {$/;"	f	class:NitricAcid
Node	../node.cpp	/^Node::Node () {$/;"	f	class:Node
NumHBonds	../adjacencymatrix.cpp	/^int AdjacencyMatrix::NumHBonds (Water const * const wat) const {$/;"	f	class:AdjacencyMatrix
NumberDensity	../density.cpp	/^vector<int> NumberDensity (AmberSystem& sys, double const start, double const end, double const binsize, coord const axis) {$/;"	f
OpenFile	../watersystem.cpp	/^void WaterSystem::OpenFile () {$/;"	f	class:WaterSystem
OutputHeader	../watersystem.cpp	/^void WaterSystem::OutputHeader(const WaterSystemParams& params) const {$/;"	f	class:WaterSystem
OutputStatus	../watersystem.cpp	/^void WaterSystem::OutputStatus () const {$/;"	f	class:WaterSystem
PDBFile	../pdbfile.cpp	/^PDBFile::PDBFile () {$/;"	f	class:PDBFile
PDBFile	../pdbfile.cpp	/^PDBFile::PDBFile (string path) {$/;"	f	class:PDBFile
PolarizabilityAndDipoleDerivs	../watersfg.cpp	/^void SFGCalculator::PolarizabilityAndDipoleDerivs (Water& water, const int s1, const int s2, const int p) {$/;"	f	class:SFGCalculator
Print	../atom.cpp	/^void Atom::Print () const {$/;"	f	class:Atom
Print	../histogram.cpp	/^void Histogram::Print () {$/;"	f	class:Histogram
Print	../matrixr.cpp	/^void MatR::Print () const {$/;"	f	class:MatR
Print	../molecule.cpp	/^void Molecule::Print () const {$/;"	f	class:Molecule
Print	../vecr.cpp	/^void VecR::Print () const {$/;"	f	class:VecR
PrintCRDFile	../ambersystem.cpp	/^void AmberSystem::PrintCRDFile (string filepath) {$/;"	f	class:AmberSystem
PrintNO2	../hno3.cpp	/^void NitricAcid::PrintNO2 () const {$/;"	f	class:NitricAcid
Quaternion	../matrixr.cpp	/^MatR MatR::Quaternion () {$/;"	f	class:MatR
Reflect	../molecule.cpp	/^void Molecule::Reflect (coord const axis, double const plane) {$/;"	f	class:Molecule
RemoveAtom	../molecule.cpp	/^void Molecule::RemoveAtom (const Atom * atom) {$/;"	f	class:Molecule
RemoveEdge	../graph.cpp	/^void Graph::RemoveEdge (Edge * e) {$/;"	f	class:Graph
RemoveEdge	../node.cpp	/^void Node::RemoveEdge (Edge * e) {$/;"	f	class:Node
RemoveEdges	../node.cpp	/^void Node::RemoveEdges () {$/;"	f	class:Node
RemoveNode	../graph.cpp	/^void Graph::RemoveNode (Node * u) {$/;"	f	class:Graph
Rename	../molecule.cpp	/^void Molecule::Rename (const string name) {$/;"	f	class:Molecule
Rotate	../molecule.cpp	/^void Molecule::Rotate (VecR origin, VecR axis, double angle) {$/;"	f	class:Molecule
RotateMatrix	../molecule.cpp	/^void Molecule::RotateMatrix (double rotation[][3], double matrix[][3]) const {$/;"	f	class:Molecule
RotateToLab	../molecule.cpp	/^void Molecule::RotateToLab (double matrix[][3]) const {$/;"	f	class:Molecule
RotateToLab	../molecule.cpp	/^void Molecule::RotateToLab (double vector[3]) const {$/;"	f	class:Molecule
RotateToMol	../molecule.cpp	/^void Molecule::RotateToMol (double matrix[][3]) const {$/;"	f	class:Molecule
RotateToMol	../molecule.cpp	/^void Molecule::RotateToMol (double vector[3]) const {$/;"	f	class:Molecule
RotateVector	../molecule.cpp	/^void Molecule::RotateVector (double rotation[][3], double vector[3]) const {$/;"	f	class:Molecule
SFGCalculator	../watersfg.cpp	/^SFGCalculator::SFGCalculator (AdjacencyMatrix * matrix) : _matrix(matrix) {$/;"	f	class:SFGCalculator
Seek	../pdbfile.cpp	/^void PDBFile::Seek (int step) {$/;"	f	class:PDBFile
Seek	../xyzfile.cpp	/^void XYZFile::Seek (int step) {$/;"	f	class:XYZFile
Seek	../xyzsystem.cpp	/^void XYZSystem::Seek (int step) {$/;"	f	class:XYZSystem
Set	../matrixr.cpp	/^void MatR::Set (int const row, int const col, double const val) {	\/\/ Set the element$/;"	f	class:MatR
SetAtoms	../h2o.cpp	/^void Hydronium::SetAtoms () {$/;"	f	class:Hydronium
SetAtoms	../h2o.cpp	/^void Hydroxide::SetAtoms () {$/;"	f	class:Hydroxide
SetAtoms	../h2o.cpp	/^void Water::SetAtoms () {$/;"	f	class:Water
SetAtoms	../hno3.cpp	/^void Nitrate::SetAtoms () {$/;"	f	class:Nitrate
SetAtoms	../hno3.cpp	/^void NitricAcid::SetAtoms () {$/;"	f	class:NitricAcid
SetBond	../adjacencymatrix.cpp	/^void AdjacencyMatrix::SetBond (int x, int y, const double blength, const bondtype btype) const {$/;"	f	class:AdjacencyMatrix
SetBondType	../bond.cpp	/^void Bond::SetBondType (const bondtype btype) {$/;"	f	class:Bond
SetCharge	../atom.cpp	/^void Atom::SetCharge () {$/;"	f	class:Atom
SetMass	../atom.cpp	/^void Atom::SetMass () {$/;"	f	class:Atom
SetMoritaAxes	../h2o.cpp	/^void Water::SetMoritaAxes (const int Zbond) {$/;"	f	class:Water
SetOrderAxes	../h2o.cpp	/^void Water::SetOrderAxes () {$/;"	f	class:Water
Shift	../atom.cpp	/^void Atom::Shift (VecR shift) {$/;"	f	class:Atom
Shift	../molecule.cpp	/^void Molecule::Shift (VecR shift) {$/;"	f	class:Molecule
SliceWaters	../watersystem.cpp	/^void WaterSystem::SliceWaters (const double low, const double high) {$/;"	f	class:WaterSystem
SystemDipole	../xyzsystem.cpp	/^VecR XYZSystem::SystemDipole () {$/;"	f	class:XYZSystem
TOPFile	../topfile.cpp	/^TOPFile::TOPFile () {$/;"	f	class:TOPFile
TOPFile	../topfile.cpp	/^TOPFile::TOPFile (const TOPFile& topfile) :$/;"	f	class:TOPFile
TOPFile	../topfile.cpp	/^TOPFile::TOPFile (std::string path) :$/;"	f	class:TOPFile
Trace	../matrixr.cpp	/^double MatR::Trace () const {$/;"	f	class:MatR
Transpose	../matrixr.cpp	/^MatR MatR::Transpose () const {$/;"	f	class:MatR
Unit	../vecr.cpp	/^VecR VecR::Unit () const {$/;"	f	class:VecR
UpdateCenterOfMass	../molecule.cpp	/^VecR Molecule::UpdateCenterOfMass () {$/;"	f	class:Molecule
UpdateGraph	../bondgraph.cpp	/^void BondGraph::UpdateGraph (Atom_ptr_vec& atoms) {$/;"	f	class:BondGraph
UpdateMatrix	../adjacencymatrix.cpp	/^void AdjacencyMatrix::UpdateMatrix (const Atom_ptr_vec& atoms) {$/;"	f	class:AdjacencyMatrix
UpdateMatrix	../connectmatrix.cpp	/^void ConnectivityMatrix::UpdateMatrix () {$/;"	f	class:ConnectivityMatrix
VecR	../vecr.cpp	/^VecR::VecR () : _coords(d_vector(0.0,0.0,0.0)) {$/;"	f	class:VecR
VecR	../vecr.cpp	/^VecR::VecR (const VecR& oldVec) : _coords(oldVec._coords) {$/;"	f	class:VecR
VecR	../vecr.cpp	/^VecR::VecR (const d_vector& oldVec) : _coords(oldVec) {$/;"	f	class:VecR
VecR	../vecr.cpp	/^VecR::VecR (const double * vec) : _coords(d_vector(vec[0],vec[1],vec[2])) {$/;"	f	class:VecR
VecR	../vecr.cpp	/^VecR::VecR (const double X, const double Y, const double Z) : _coords(d_vector(X,Y,Z)) {$/;"	f	class:VecR
WannierFile	../wannier.cpp	/^WannierFile::WannierFile (std::string wannierpath) {$/;"	f	class:WannierFile
Water	../h2o.cpp	/^Water::Water () : Molecule() {$/;"	f	class:Water
Water	../h2o.cpp	/^Water::Water (const Molecule& molecule) : Molecule(molecule) {$/;"	f	class:Water
WaterCoordination	../adjacencymatrix.cpp	/^coordination AdjacencyMatrix::WaterCoordination (Water const * const wat) const {$/;"	f	class:AdjacencyMatrix
WaterDipoleParms	../dipoleparm.cpp	/^WaterDipoleParms::WaterDipoleParms (string parmpath="dipoleparm.dat") {$/;"	f	class:WaterDipoleParms
WaterEigenSystem	../watersfg.cpp	/^void SFGCalculator::WaterEigenSystem (Water& water) {$/;"	f	class:SFGCalculator
WaterSystem	../watersystem.cpp	/^WaterSystem::WaterSystem (const WaterSystemParams& params) :$/;"	f	class:WaterSystem
WaterSystem	../watersystem.cpp	/^WaterSystem::WaterSystem (const int argc, const char **argv, const WaterSystemParams& params) :$/;"	f	class:WaterSystem
Wrap	../atom.cpp	/^void Atom::Wrap (VecR origin = VecR(0.0, 0.0, 0.0)) {$/;"	f	class:Atom
Wrap	../vecr.cpp	/^VecR VecR::Wrap (VecR size, VecR origin) {$/;"	f	class:VecR
WritePDB	../pdbfile.cpp	/^void PDBFile::WritePDB (vector<Molecule *> sys) {$/;"	f	class:PDBFile
XYZFile	../xyzfile.cpp	/^XYZFile::XYZFile () {$/;"	f	class:XYZFile
XYZFile	../xyzfile.cpp	/^XYZFile::XYZFile (string path) {$/;"	f	class:XYZFile
XYZSystem	../xyzsystem.cpp	/^XYZSystem::XYZSystem (string filepath, VecR size, string wannierpath)$/;"	f	class:XYZSystem
Zero	../vecr.cpp	/^void VecR::Zero () {$/;"	f	class:VecR
_Data	../dipoleparm.cpp	/^double * WaterDipoleParms::_Data (double r1, double r2, double theta) {$/;"	f	class:WaterDipoleParms
_FillBoxLattice	../boxfiller.cpp	/^void BoxFiller::_FillBoxLattice () {$/;"	f	class:BoxFiller
_FillBoxRandom	../boxfiller.cpp	/^void BoxFiller::_FillBoxRandom () {$/;"	f	class:BoxFiller
_FindBonds	../connectmatrix.cpp	/^void ConnectivityMatrix::_FindBonds (Atom * atom1, Atom * atom2) {$/;"	f	class:ConnectivityMatrix
_FindEulerAngles	../molecule.cpp	/^void Molecule::_FindEulerAngles () {$/;"	f	class:Molecule
_FindLastStep	../pdbfile.cpp	/^int PDBFile::_FindLastStep () {$/;"	f	class:PDBFile
_FindSteps	../xyzfile.cpp	/^void XYZFile::_FindSteps () {$/;"	f	class:XYZFile
_FormCovalentBond	../connectmatrix.cpp	/^void ConnectivityMatrix::_FormCovalentBond (const Atom * atom1, const Atom * atom2) {$/;"	f	class:ConnectivityMatrix
_FormHBond	../connectmatrix.cpp	/^void ConnectivityMatrix::_FormHBond (Atom * atom1, Atom * atom2) {$/;"	f	class:ConnectivityMatrix
_InitParams	../boxfiller.cpp	/^void BoxFiller::_InitParams () {$/;"	f	class:BoxFiller
_ParseAtom	../pdbfile.cpp	/^Atom *PDBFile::_ParseAtom (const char *atomEntry) {$/;"	f	class:PDBFile
_ParseAtomInformation	../ambersystem.cpp	/^void AmberSystem::_ParseAtomInformation () {$/;"	f	class:AmberSystem
_ParseAtomVectors	../ambersystem.cpp	/^void AmberSystem::_ParseAtomVectors () {$/;"	f	class:AmberSystem
_ParseFile	../complexdatafile.cpp	/^void ComplexDataFile::_ParseFile () {$/;"	f	class:ComplexDataFile
_ParseMolecules	../ambersystem.cpp	/^void AmberSystem::_ParseMolecules () {$/;"	f	class:AmberSystem
_ParseMolecules	../xyzsystem.cpp	/^void XYZSystem::_ParseMolecules () {$/;"	f	class:XYZSystem
_ParseWanniers	../xyzsystem.cpp	/^void XYZSystem::_ParseWanniers () {$/;"	f	class:XYZSystem
clear	../molecule.cpp	/^void Molecule::clear () {$/;"	f	class:Molecule
main	../complexdatafile.cpp	/^int main (int argc, char **argv) {$/;"	f
numHydroniums	../h2o.cpp	/^int Hydronium::numHydroniums = 0;$/;"	m	class:Hydronium	file:
numHydroxides	../h2o.cpp	/^int Hydroxide::numHydroxides = 0;$/;"	m	class:Hydroxide	file:
numMolecules	../molecule.cpp	/^int Molecule::numMolecules = 0;$/;"	m	class:Molecule	file:
numNitrates	../hno3.cpp	/^int Nitrate::numNitrates = 0;$/;"	m	class:Nitrate	file:
numNitricAcids	../hno3.cpp	/^int NitricAcid::numNitricAcids = 0;$/;"	m	class:NitricAcid	file:
numWaters	../h2o.cpp	/^int Water::numWaters = 0;$/;"	m	class:Water	file:
num_bonds	../bond.cpp	/^int Bond::num_bonds = 0;$/;"	m	class:Bond	file:
num_edges	../edge.cpp	/^int Edge::num_edges = 0;$/;"	m	class:Edge	file:
num_nodes	../node.cpp	/^int Node::num_nodes = 0;$/;"	m	class:Node	file:
operator %	../vecr.cpp	/^VecR VecR::operator% (const VecR& input) const {$/;"	f	class:VecR
operator ()	../matrixr.cpp	/^double MatR::operator() (int const row, int const col) const {$/;"	f	class:MatR
operator ()	../vecr.cpp	/^double VecR::operator() (const coord index) const {$/;"	f	class:VecR
operator ()	../vecr.cpp	/^double VecR::operator() (const int index) const {$/;"	f	class:VecR
operator *	../matrixr.cpp	/^MatR MatR::operator* (const MatR& input) const {		\/\/ Matrix rotation\/multiplication$/;"	f	class:MatR
operator *	../matrixr.cpp	/^VecR MatR::operator* (const VecR& input) const {		\/\/ Vector rotation\/matrix-vector inner product$/;"	f	class:MatR
operator *	../vecr.cpp	/^VecR VecR::operator* (const double input) const {$/;"	f	class:VecR
operator *	../vecr.cpp	/^double VecR::operator* (const VecR& input) const {$/;"	f	class:VecR
operator *=	../vecr.cpp	/^void VecR::operator*= (const double input) {$/;"	f	class:VecR
operator +	../matrixr.cpp	/^MatR MatR::operator+ (const MatR& input) const {$/;"	f	class:MatR
operator +	../vecr.cpp	/^VecR VecR::operator+ (const VecR& input) const {$/;"	f	class:VecR
operator +=	../vecr.cpp	/^void VecR::operator+= (const VecR& input) {$/;"	f	class:VecR
operator +=	../vecr.cpp	/^void VecR::operator+= (const double input) {$/;"	f	class:VecR
operator -	../atom.cpp	/^double Atom::operator- (const Atom& input) const {$/;"	f	class:Atom
operator -	../vecr.cpp	/^VecR VecR::operator- (const VecR& input) const {$/;"	f	class:VecR
operator -=	../vecr.cpp	/^void VecR::operator-= (const VecR& input) {$/;"	f	class:VecR
operator -=	../vecr.cpp	/^void VecR::operator-= (const double input) {$/;"	f	class:VecR
operator <	../vecr.cpp	/^double VecR::operator< (const VecR& input) const {$/;"	f	class:VecR
operator ==	../vecr.cpp	/^bool VecR::operator== (const VecR& input) const {$/;"	f	class:VecR
operator []	../atom.cpp	/^double Atom::operator[] (const coord index) const {$/;"	f	class:Atom
operator []	../molecule.cpp	/^Atom * Molecule::operator[] (const string atomname) const {$/;"	f	class:Molecule
operator []	../vecr.cpp	/^double VecR::operator[] (const coord index) const {$/;"	f	class:VecR
operator []	../vecr.cpp	/^double VecR::operator[] (const int index) const {$/;"	f	class:VecR
q_pt	../hno3analysis.cpp	/^double q_pt (XYZSystem& sys, Molecule * hno3) {$/;"	f
~AdjacencyMatrix	../adjacencymatrix.cpp	/^AdjacencyMatrix::~AdjacencyMatrix () {$/;"	f	class:AdjacencyMatrix
~AmberSystem	../ambersystem.cpp	/^AmberSystem::~AmberSystem () {$/;"	f	class:AmberSystem
~Bond	../bond.cpp	/^Bond::~Bond () {$/;"	f	class:Bond
~BoxFiller	../boxfiller.cpp	/^BoxFiller::~BoxFiller() { };$/;"	f	class:BoxFiller
~CRDFile	../crdfile.cpp	/^CRDFile::~CRDFile () {$/;"	f	class:CRDFile
~DipoleFieldTensor	../dipolefieldtensor.cpp	/^DipoleFieldTensor::~DipoleFieldTensor () {$/;"	f	class:DipoleFieldTensor
~Edge	../edge.cpp	/^Edge::~Edge () {$/;"	f	class:Edge
~ForceFile	../forcefile.cpp	/^ForceFile::~ForceFile () {$/;"	f	class:ForceFile
~Graph	../graph.cpp	/^Graph::~Graph () {$/;"	f	class:Graph
~Hydronium	../h2o.cpp	/^Hydronium::~Hydronium () {$/;"	f	class:Hydronium
~Hydroxide	../h2o.cpp	/^Hydroxide::~Hydroxide () {$/;"	f	class:Hydroxide
~Molecule	../molecule.cpp	/^Molecule::~Molecule () {$/;"	f	class:Molecule
~Nitrate	../hno3.cpp	/^Nitrate::~Nitrate () {$/;"	f	class:Nitrate
~NitricAcid	../hno3.cpp	/^NitricAcid::~NitricAcid () {$/;"	f	class:NitricAcid
~Node	../node.cpp	/^Node::~Node () {$/;"	f	class:Node
~PDBFile	../pdbfile.cpp	/^PDBFile::~PDBFile () {$/;"	f	class:PDBFile
~TOPFile	../topfile.cpp	/^TOPFile::~TOPFile () {$/;"	f	class:TOPFile
~VecR	../vecr.cpp	/^VecR::~VecR () {$/;"	f	class:VecR
~WannierFile	../wannier.cpp	/^WannierFile::~WannierFile () {$/;"	f	class:WannierFile
~Water	../h2o.cpp	/^Water::~Water () {$/;"	f	class:Water
~WaterSystem	../watersystem.cpp	/^WaterSystem::~WaterSystem () {$/;"	f	class:WaterSystem
~XYZFile	../xyzfile.cpp	/^XYZFile::~XYZFile () {$/;"	f	class:XYZFile
~XYZSystem	../xyzsystem.cpp	/^XYZSystem::~XYZSystem () {$/;"	f	class:XYZSystem
