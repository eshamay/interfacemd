#include "densitytest.h"

int main (int argc, char **argv) {

	// this will be our output data file
	FILE * output;
	output = fopen ("density.dat", "w");

	// here is our system for analysis
	AmberSystem sys (PRMTOP, MDCRD, FORCE);
	DensityParams params;

	params.steps 	= 100000;
	params.start 	= -5.0;
	params.end 		= 80.0;
	params.binsize 	= 0.1;
	params.axis		= y;
	// first we figure out how many bins there are on each axis
	params.size = int ((params.end - params.start)/params.binsize) + 1;

	vector< vector<int> > density;
	vector<string> atomNames;

	// from the command line, grab all the atom name that we'll be working with
	for (int i = 1; i < argc; i++) {
		atomNames.push_back (argv[i]);
	}

	// now we set up the histogram(s) such that we may bin the positions of each atom
	density.resize(atomNames.size(), vector<int> (params.size, 0));
	
	// now let's run through the timestesp
	for (int step=0; step < params.steps; step++) {
		
		// for each atom that we're testing we'll add the histogram data into the final data-set
		for (int atom=0; atom < atomNames.size(); atom++) {
			vector<int> atomDensity = AtomDensity (sys, &params, atomNames[atom]);

			// once we have the data for each atom for each timestep, let's add it into the running total
			for (int i=0; i < params.size; i++) 
				density[atom][i] += atomDensity[i];
		}
			
		// and set up the system for the next timestep
		sys.LoadNext();

		PrintStatus (step);
		if (!(step % (OUTPUT_FREQ * 25)))
			PrintToFile (output, density, atomNames.size(), &params);

	}

	PrintToFile (output, density, atomNames.size(), &params);
	fclose(output);

return 0;
}

void PrintToFile (FILE * output, vector< vector<int> >& density, int numAtoms, DensityParams * params) {

	// lastly let's perform a little data output
	/***	This can be used as a header ***
	printf ("position");
	for (int atom = 0; atom < atomNames.size(); atom++) {
		printf ("%10s", atomNames[atom].c_str());
	} printf ("\n");
	*/

	// starting from the beginning of the file (i.e. overwrite it)
	rewind (output);

	for (int i=0; i < params->size; i++) {
		fprintf (output, "% 10.4f", double(i)*params->binsize+params->start);		// the bin's position value

		for (int atom = 0; atom < numAtoms; atom++) {
			fprintf (output, "% 10d", density[atom][i]);			// for each atom printout the histogram value at that position
		}

		fprintf (output, "\n");
	}

return;
}
	
// a status output meter
void PrintStatus (int step) {

	if (!(step % (OUTPUT_FREQ * 10))) 
		cout << endl << step;
	if (!(step % OUTPUT_FREQ))  
		cout << "*";

return;
}

vector<int> AtomDensity ( AmberSystem& sys, DensityParams * params, string const atomname ) {

	// then create the output vector
	vector<int> density;
	// and we'll size and zero out the containers
	density.resize (params->size, 0);
	
	// and now run through the actual calculations to find number densities
	RUN (sys) {
			
		// find the atom of interest
		Atom * patom = sys[i];
		if (sys[i]->Name().find(atomname) == string::npos) continue;

		// grab the position info of the atom
		VecR r = patom->Position();
		double position = r[params->axis];
		if (position < 15.0) position += 60.0;

		// and bin it into the density histogram
		int bin = (int)((position-params->start)/params->binsize);

		density[bin]++;
	}

return (density);
}
