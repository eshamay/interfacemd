!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AMBER2ATOMIC	watersfg.h	/^const double AMBER2ATOMIC		=	1.0\/HARTREE2KCALPMOL\/ANG2BOHR;	\/\/ convert amber forces (kcal\/mol\/A) into atomic force units$/;"	v
AMBERMPISYS_H_	ambermpisys.h	2;"	d
AMBERSYSTEM_H_	ambersystem.h	2;"	d
AMBERWATERSYSTEM_H_	amberwatersystem.h	2;"	d
ANALYSIS_H_	analysis.h	2;"	d
ANG2BOHR	watersfg.h	/^const double ANG2BOHR			=	1.889726125;					\/\/ angstroms to bohr radii$/;"	v
ATOM_H_	atom.h	2;"	d
AU2WAVENUMBER	watersfg.h	/^const double AU2WAVENUMBER		=	HZ2WAVENUMBER\/HZ2AU;			\/\/ convert from frequencies in atomic units to cm-1 (note: **not angular frequencies!** For that we need to fix the factor of 2*Pi)$/;"	v
A_HOO	hno3analysis.h	/^const double A_HOO = 35.0;			\/\/ The angle of the H-O...O above which we don't have an H-bond.$/;"	v
AddWannier	molecule.h	/^	void AddWannier (VecR& wannier) { _wanniers.push_back(wannier); } \/\/ adds a wannier center into the molecule$/;"	f	class:Molecule
Adj_it	graph.h	/^typedef boost::graph_traits<Graph>::adjacency_iterator Adj_it;$/;"	t
AdjacencyMatrix	adjacencymatrix.h	/^class AdjacencyMatrix {$/;"	c
AdjacencyMatrix	connectmatrix.h	/^class AdjacencyMatrix {$/;"	c
Alpha	h2o.h	/^	MatR const & Alpha () const { return _alpha; }$/;"	f	class:Water
AlphaDeriv1	watersfg.h	/^	MatR AlphaDeriv1;			\/\/ polarizability deriv matrix for the first OH bond in the frame of the 1st OH bond$/;"	m	class:SFGCalculator
AlphaDeriv2	watersfg.h	/^	MatR AlphaDeriv2;			\/\/ polarizability deriv matrix of the 2nd OH in the frame of the 1st OH (through unitary transformation)$/;"	m	class:SFGCalculator
AmberSystem	ambersystem.h	/^	AmberSystem () { }$/;"	f	class:AmberSystem
AmberSystem	ambersystem.h	/^class AmberSystem : public MDSystem {$/;"	c
AmberWaterSystem	amberwatersystem.h	/^	AmberWaterSystem (const WaterSystemParams& params, std::string const prmtop, std::string const mdcrd, std::string mdvel)$/;"	f	class:AmberWaterSystem
AmberWaterSystem	amberwatersystem.h	/^class AmberWaterSystem : public WaterSystem<AmberSystem> {$/;"	c
Analyzer	analysis.h	/^class Analyzer : public WaterSystem<AmberSystem> {$/;"	c
Angle	h2o.h	/^	double Angle () const { return acos(_oh1 < _oh2) * 180.0\/M_PI; }$/;"	f	class:Water
Atom	atom.h	/^class Atom {$/;"	c
AtomNames	topfile.h	/^	std::vector<std::string>& AtomNames () { return _atomnames; }$/;"	f	class:TOPFile
Atom_it	atom.h	/^typedef std::vector<Atom>::iterator Atom_it;$/;"	t
Atom_ptr_it	atom.h	/^typedef std::vector<Atom *>::iterator Atom_ptr_it;$/;"	t
Atom_ptr_vec	atom.h	/^typedef std::vector<Atom *> Atom_ptr_vec;$/;"	t
Atom_ptr_vec	graph.h	/^typedef std::vector<Atom *> Atom_ptr_vec;$/;"	t
Atom_ptr_vec	mdsystem.h	/^typedef std::vector<Atom *> Atom_ptr_vec;$/;"	t
Atom_vec	atom.h	/^typedef std::vector<Atom> Atom_vec;$/;"	t
Atoms	ambermpisys.h	/^	Atom * Atoms (int index) { return &_atoms[index]; }$/;"	f	class:MPIMolSystem
Atoms	mdsystem.h	/^	Atom * Atoms (const int index) { return _atoms[index]; }$/;"	f	class:MDSystem
Atoms	mdsystem.h	/^	Atom_ptr_vec& Atoms () { return _atoms; }$/;"	f	class:MDSystem
Atoms	molecule.h	/^	Atom * Atoms (int index) const		{ return _atoms[index]; }$/;"	f	class:Molecule
Atoms	molecule.h	/^	Atom_ptr_vec Atoms () const			{ return _atoms; }			\/\/ returns the molecule's atom list$/;"	f	class:Molecule
Atoms	pdbfile.h	/^	Atom * Atoms (int index) { return _atoms[index]; }$/;"	f	class:PDBFile
Atoms	xyzfile.h	/^	std::vector<Atom *>& Atoms () { return _atoms; }$/;"	f	class:XYZFile
BLOCK_HIGH	ambermpisys.h	10;"	d
BLOCK_LOW	ambermpisys.h	9;"	d
BLOCK_OWNER	ambermpisys.h	12;"	d
BLOCK_SIZE	ambermpisys.h	11;"	d
BONDGRAPH_H_	bondgraph.h	2;"	d
BOND_H_	bond.h	2;"	d
BOXFILLER_H_	boxfiller.h	2;"	d
Bin	histogram.h	/^	int Bin (int const value) const {		\/\/ calculates the bin for the given value$/;"	f	class:Histogram
BinSize	histogram.h	/^	double BinSize () { return _binSize; }$/;"	f	class:Histogram
BlockHigh	ambermpisys.h	/^	int BlockHigh (int n) { return BLOCK_HIGH(_id, _p, n); }$/;"	f	class:MPIMolSystem
BlockLow	ambermpisys.h	/^	int BlockLow (int n) { return BLOCK_LOW(_id, _p, n); }$/;"	f	class:MPIMolSystem
BlockSize	ambermpisys.h	/^	int BlockSize (int n) { return BLOCK_SIZE(_id, _p, n); }$/;"	f	class:MPIMolSystem
Bond	bond.h	/^class Bond {$/;"	c
BondGraph	bondgraph.h	/^class BondGraph {$/;"	c
BondGraph	graph.h	/^class BondGraph {$/;"	c
BondTrajectory	wateranalyzer.h	/^vector<double> WaterAnalyzer::BondTrajectory (string atomName1, string atomName2, double bondlengthmax) {$/;"	f	class:WaterAnalyzer
Bond_matrix	adjacencymatrix.h	/^typedef std::vector< Bond_vec > Bond_matrix;$/;"	t
Bond_ptr_matrix	adjacencymatrix.h	/^typedef std::vector< Bond_ptr_vec > Bond_ptr_matrix;$/;"	t
Bond_ptr_vec	adjacencymatrix.h	/^typedef std::vector<Bond *> Bond_ptr_vec;$/;"	t
Bond_ptr_vec	bond.h	/^typedef std::vector<Bond *> Bond_ptr_vec;$/;"	t
Bond_vec	adjacencymatrix.h	/^typedef std::vector<Bond> Bond_vec;$/;"	t
BondedAtoms	xyzsystem.h	/^	Atom_ptr_vec BondedAtoms (Atom const * const atom) const { return _graph.BondedAtoms (atom); }$/;"	f	class:XYZSystem
BoxFiller	boxfiller.h	/^class BoxFiller {$/;"	c
C1	moritasfg2002.h	/^const double C1 =  0.1396,$/;"	v
C2	moritasfg2002.h	/^			 C2 = -0.1196,$/;"	v
C3	moritasfg2002.h	/^			 C3 = -0.0164,$/;"	v
C4	moritasfg2002.h	/^			 C4 = -0.0288,$/;"	v
C5	moritasfg2002.h	/^			 C5 = -0.0516,$/;"	v
C6	moritasfg2002.h	/^			 C6 =  0.0532,$/;"	v
C7	moritasfg2002.h	/^			 C7 = -0.0699,$/;"	v
C8	moritasfg2002.h	/^			 C8 =  0.0169,$/;"	v
C9	moritasfg2002.h	/^			 C9 =  0.1142;$/;"	v
CARBONCHAIN_H_	carbonchain.h	2;"	d
CONNECTMATRIX_H_	adjacencymatrix.h	2;"	d
CONNECTMATRIX_H_	connectmatrix.h	2;"	d
COUPLING_CONST	watersfg.h	/^const double COUPLING_CONST		= 49.5\/AU2WAVENUMBER;				\/\/ Coupling const taken from the energy gap of the sym + antisym stretches (V12 in atomic units)$/;"	v
CRDFILE_H_	crdfile.h	2;"	d
CRDFile	crdfile.h	/^	CRDFile () { }$/;"	f	class:CRDFile
CRDFile	crdfile.h	/^class CRDFile {$/;"	c
Carbon	carbonchain.h	/^		Atom * Carbon (int index) { return (_carbons[index]); }$/;"	f	class:CarbonChain
CarbonChain	carbonchain.h	/^class CarbonChain : public Molecule {$/;"	c
CarbonChain_ptr_vec	carbonchain.h	/^typedef std::vector<CarbonChain *> CarbonChain_ptr_vec;$/;"	t
CarbonChain_vec	carbonchain.h	/^typedef std::vector<CarbonChain> CarbonChain_vec;$/;"	t
Carbons	carbonchain.h	/^		vector<Atom *>& Carbons () { return (_carbons); }$/;"	f	class:CarbonChain
CenterOfMass	molecule.h	/^	VecR CenterOfMass () const		{ return _centerofmass; }$/;"	f	class:Molecule
Charge	atom.h	/^	double Charge () const 	{ return _charge; }$/;"	f	class:Atom
Charges	topfile.h	/^	std::vector<double>& Charges () 	{ return _charges; }$/;"	f	class:TOPFile
ClearWanniers	molecule.h	/^	void ClearWanniers () { _wanniers.clear(); }	\/\/ clear out the entire list$/;"	f	class:Molecule
ComplexDataFile	complexdatafile.h	/^class ComplexDataFile {$/;"	c
CoordTrajectories	wateranalyzer.h	/^vector< vector<trajectory> > WaterAnalyzer::CoordTrajectories () {$/;"	f	class:WaterAnalyzer
Coords	ambersystem.h	/^	VecR& Coords (int index)	{ return _coords[index]; }$/;"	f	class:AmberSystem
Coords	crdfile.h	/^	const std::vector<VecR>& Coords () const { return _coords; }$/;"	f	class:CRDFile
Coords	wannier.h	/^	const std::vector<VecR>& Coords () const { return _coords; }$/;"	f	class:WannierFile
CovalentBonds	xyzsystem.h	/^	Atom_ptr_vec CovalentBonds (Atom const * const atom) const { return _graph.BondedAtoms(atom, covalent); }$/;"	f	class:XYZSystem
Current	ambersystem.h	/^	int 	Current ()		const 	{ return _coords.Current(); }$/;"	f	class:AmberSystem
Current	crdfile.h	/^	int Current () 	const { return _frame; }$/;"	f	class:CRDFile
Current	forcefile.h	/^	int Current () 	{ return _frame; }$/;"	f	class:ForceFile
Current	pdbfile.h	/^	int Current () { return _currentstep; }$/;"	f	class:PDBFile
Current	wannier.h	/^	int Current () 	const { return _frame; }$/;"	f	class:WannierFile
Current	xyzfile.h	/^	int Current () const { return _currentstep; }$/;"	f	class:XYZFile
Current	xyzsystem.h	/^	int Current ()		const { return _coords.Current(); }$/;"	f	class:XYZSystem
D1	moritasfg2002.h	/^const double D1 = 4.6077,$/;"	v
D2	moritasfg2002.h	/^			 D2 = 4.8894,$/;"	v
D3	moritasfg2002.h	/^			 D3 = 5.5062,$/;"	v
D4	moritasfg2002.h	/^			 D4 = 1.6890,$/;"	v
D5	moritasfg2002.h	/^			 D5 = 1.6102,$/;"	v
D6	moritasfg2002.h	/^			 D6 = 7.3812,$/;"	v
D7	moritasfg2002.h	/^			 D7 = 3.4710;$/;"	v
DEBUG	xyzsystem.h	10;"	d
DECANE_H_	decane.h	2;"	d
DIPOLEPARM_H_	dipoleparm.h	2;"	d
DR	rdf.h	6;"	d
Dbl_mtr	moritasfg2002.h	/^typedef std::vector< std::vector< double > > Dbl_mtr;$/;"	t
Decane	decane.h	/^class Decane: public CarbonChain {$/;"	c
Decane_ptr_vec	decane.h	/^typedef std::vector<Decane *> Decane_ptr_vec;$/;"	t
Decane_vec	decane.h	/^typedef std::vector<Decane> Decane_vec;$/;"	t
Degree	node.h	/^	int Degree () const { return edges.size(); }$/;"	f	class:Node
Dims	ambersystem.h	/^	VecR	Dims () 		const 	{ return _coords.Dims(); }		\/\/ returns the system size.$/;"	f	class:AmberSystem
Dims	crdfile.h	/^	const VecR& Dims () const { return _dims; }$/;"	f	class:CRDFile
Dipole	dipoleparm.h	/^	VecR Dipole (double r1, double r2, double theta) {$/;"	f	class:WaterDipoleParms
Dipole	h2o.h	/^	VecR const & Dipole () const { return _dipole; }			\/\/ calculates the dipole (from a parameterized source)$/;"	f	class:Water
Dipole	molecule.h	/^	VecR Dipole () const { return _dipole; }		\/\/ return the dipole of the molecule$/;"	f	class:Molecule
DipoleCorrelation	wateranalyzer.h	/^trajectory WaterAnalyzer::DipoleCorrelation () {$/;"	f	class:WaterAnalyzer
DipoleFieldTensor	dipolefieldtensor.h	/^class DipoleFieldTensor {$/;"	c
Distance	adjacencymatrix.h	/^	double Distance (Atom const * const a1, Atom const * const a2) {$/;"	f	class:AdjacencyMatrix
Distance_matrix	adjacencymatrix.h	/^typedef std::vector< std::vector< VecR > > Distance_matrix;$/;"	t
Double_matrix	matrixr.h	/^typedef std::vector< Double_vector >	Double_matrix;$/;"	t
Double_vector	vecr.h	/^typedef std::vector<double>	Double_vector;$/;"	t
END_FREQ	watersfg.h	/^const double END_FREQ			= 3800.0\/AU2WAVENUMBER;$/;"	v
Edge	graph.h	/^typedef boost::graph_traits<Graph>::edge_descriptor Edge;$/;"	t
EdgeProperties	bondgraph.h	/^struct EdgeProperties {$/;"	s
EdgeProperties	graph.h	/^	EdgeProperties (const double b_length, const bondtype b_type) : distance(b_length), btype(b_type) { }$/;"	f	struct:EdgeProperties
EdgeProperties	graph.h	/^struct EdgeProperties {$/;"	s
Edge_it	graph.h	/^typedef boost::graph_traits<Graph>::edge_iterator Edge_it;$/;"	t
Element	dipolefieldtensor.h	/^	double const Element (int const row, int const col) const { return _tensor[col*3+row]; }$/;"	f	class:DipoleFieldTensor
EulerAngles	h2o.h	/^	double EulerAngles[3];				\/\/ euler angles as defined in "The Raman Effect" Appendix A5 (theta, phi, chi)$/;"	m	class:Water
EulerAngles	molecule.h	/^	double * EulerAngles () 		{ return _eulerangles; }$/;"	f	class:Molecule
EulerMatrix	h2o.h	/^	MatR EulerMatrix;					\/\/ The euler rotation matrix$/;"	m	class:Water
FORCEFILE_H_	forcefile.h	2;"	d
FREQ_STEP	watersfg.h	/^const double FREQ_STEP			= 1.0\/AU2WAVENUMBER;		\/\/ step size when calculating the spectra$/;"	v
File	topfile.h	/^	FILE * File () const { return _topfile; }$/;"	f	class:TOPFile
FindEulerAngles	backup.h	/^void Water::FindEulerAngles () {$/;"	f	class:Water
FindInterfaces	ambermpisys.h	/^vector<double> MPIMolSystem::FindInterfaces (string atomName, string residue) {$/;"	f	class:MPIMolSystem
FindInterfaces	interfaces.h	/^vector<double> FindInterfaces (string atomName, string residue) {$/;"	f
FindInterfacialWaters	watersystem.h	/^void WaterSystem<T>::FindInterfacialWaters () {$/;"	f	class:WaterSystem
FindMols	watersystem.h	/^void WaterSystem<T>::FindMols (const string name) {$/;"	f	class:WaterSystem
FindWaters	watersystem.h	/^void WaterSystem<T>::FindWaters () {$/;"	f	class:WaterSystem
First	pdbfile.h	/^	int First () { return _initstep; }$/;"	f	class:PDBFile
FlipWaters	watersystem.h	/^void WaterSystem<T>::FlipWaters (const coord axis) {$/;"	f	class:WaterSystem
Force	atom.h	/^	const VecR& Force () const		{ return _force; }$/;"	f	class:Atom
Force	atom.h	/^	void Force (const VecR& force) { _force = force; }$/;"	f	class:Atom
Force	atom.h	/^	void Force (coord const axis, double const value) { _force.Set (axis, value); }$/;"	f	class:Atom
Force	atom.h	/^	void Force (double X, double Y, double Z) { _force.Set(X, Y, Z); }$/;"	f	class:Atom
ForceFile	forcefile.h	/^class ForceFile {$/;"	c
Forces	ambersystem.h	/^	VecR& Forces (int index)	{ return _forces[index]; }$/;"	f	class:AmberSystem
Forces	forcefile.h	/^	const std::vector<VecR>& Forces () const { return _forces; }$/;"	f	class:ForceFile
GAMMA	watersfg.h	/^const double GAMMA				= 2.0\/AU2WAVENUMBER;				\/\/ the "damping parameter" first shown in Eq. 3 scaled down to some value (between 2 and 22 cm-1 as Dave put it)$/;"	v
GAMMA_SQ	watersfg.h	/^const double GAMMA_SQ			= GAMMA*GAMMA;				\/\/ ...squared$/;"	v
GRAPH_H_	graph.h	2;"	d
GetH	hno3.h	/^	Atom * GetH () const { return _h; }$/;"	f	class:NitricAcid
GetOH	hno3.h	/^	Atom * GetOH () const { return _oh; }$/;"	f	class:NitricAcid
GetThread	thread.h	/^	pthread_t * GetThread () const { return _thread; }$/;"	f	class:Thread
Graph	bondgraph.h	/^typedef boost::adjacency_list<listS, listS, bidirectionalS, VertexProperties, EdgeProperties> Graph;$/;"	t
Graph	graph.h	/^typedef boost::adjacency_list<listS, listS, undirectedS, VertexProperties, EdgeProperties> Graph;$/;"	t
H	bond.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon3
H	bondgraph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon1
H	connectmatrix.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon5
H	graph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon7
H2O_H_	h2o.h	2;"	d
H3O_H_	h3o.h	2;"	d
HARTREE2KCALPMOL	watersfg.h	/^const double HARTREE2KCALPMOL	=	627.509;						\/\/ from hartree to kcal\/mol$/;"	v
HBONDANGLE	bond.h	/^const double HBONDANGLE	= 30.0*M_PI\/180.0;		\/\/ bonding angle has to be less than this value to be considered an H-bond$/;"	v
HBONDANGLE	bondgraph.h	/^const double HBONDANGLE	= 30.0*M_PI\/180.0;		\/\/ bonding angle has to be less than this value to be considered an H-bond$/;"	v
HBONDANGLE	connectmatrix.h	/^const double HBONDANGLE	= 0.866025;		\/\/ cos(theta) has to be less than this value to be considered an H-bond$/;"	v
HBONDANGLE	graph.h	/^const double HBONDANGLE	= 30.0*M_PI\/180.0;		\/\/ bonding angle has to be less than this value to be considered an H-bond$/;"	v
HBONDLENGTH	bond.h	/^const double HBONDLENGTH  = 2.5;				\/\/ used to be 2.46$/;"	v
HBONDLENGTH	bondgraph.h	/^const double HBONDLENGTH  = 2.5;				\/\/ used to be 2.46$/;"	v
HBONDLENGTH	connectmatrix.h	/^const double HBONDLENGTH  = 2.46;$/;"	v
HBONDLENGTH	graph.h	/^const double HBONDLENGTH  = 2.5;				\/\/ used to be 2.46$/;"	v
HH	bond.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon3
HH	bondgraph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon1
HH	connectmatrix.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon5
HH	graph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon7
HHH	bond.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon3
HHH	bondgraph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon1
HHH	connectmatrix.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon5
HHH	graph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon7
HHHH	bond.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon3
HHHH	bondgraph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon1
HHHH	connectmatrix.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon5
HHHH	graph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon7
HISTOGRAM_H_	histogram.h	2;"	d
HNO3ANALYSIS_H_	hno3analysis.h	2;"	d
HNO3_H_	hno3.h	2;"	d
HZ2AU	watersfg.h	/^const double HZ2AU			=	2.418884324306202e-17;			\/\/ convert Hz to atomic units of frequency$/;"	v
HZ2WAVENUMBER	watersfg.h	/^const double HZ2WAVENUMBER	=	3.335641e-11;				\/\/ convert from Hz to wavenumbers (cm-1)  (this is 1\/c)$/;"	v
Histogram	histogram.h	/^class Histogram {$/;"	c
Hydronium	h3o.h	/^class Hydronium: public Molecule {$/;"	c
Hydroxide	oh.h	/^class Hydroxide: public Molecule {$/;"	c
ID	ambermpisys.h	/^	int ID () const 			{ return _id; }$/;"	f	class:MPIMolSystem
ID	atom.h	/^	int ID () const 		{ return _ID; }$/;"	f	class:Atom
ID	atom.h	/^	void ID (int id) { _ID = id; }$/;"	f	class:Atom
Join	thread.h	/^void * Thread<T>::Join () {$/;"	f	class:Thread
Last	pdbfile.h	/^	int Last () { return _laststep; }$/;"	f	class:PDBFile
LoadNext	ambermpisys.h	/^void MPIMolSystem::LoadNext () {$/;"	f	class:MPIMolSystem
Loaded	forcefile.h	/^	bool Loaded ()	{ return _loaded; }$/;"	f	class:ForceFile
Loaded	wannier.h	/^	bool Loaded ()	const { return _loaded; }	\/\/ find out if the file is loaded\/exists$/;"	f	class:WannierFile
M	watersfg.h	/^const double M		=	(MOXY*MHYD)\/(MOXY+MHYD);	\/\/ reduced mass of the OH bond\/oscillator$/;"	v
MATRIXR_H_	matrixr.h	2;"	d
MDSYSTEM_H_	mdsystem.h	2;"	d
MDSystem	mdsystem.h	/^class MDSystem {$/;"	c
MHYD	watersfg.h	/^const double MHYD	=	(MPROT*1.0+1.0);		\/\/ and mass of a hydrogen$/;"	v
MIN_TRAJ_SIZE	wateranalyzer.h	411;"	d
MOLECULE_H_	molecule.h	2;"	d
MOL_IT	molecule.h	/^typedef std::vector<Molecule>::iterator MOL_IT;$/;"	t
MORITASFG2002_H_	moritasfg2002.h	2;"	d
MOXY	watersfg.h	/^const double MOXY	=	(MPROT*8.0+8.0);		\/\/ mass of an oxygen atom in atomic units$/;"	v
MPIMolSystem	ambermpisys.h	/^MPIMolSystem::MPIMolSystem (int *argc, char ***argv, string prmtop, string mdcrd, string mdvel) {$/;"	f	class:MPIMolSystem
MPIMolSystem	ambermpisys.h	/^class MPIMolSystem {$/;"	c
MPROT	watersfg.h	/^const double MPROT	=	1836.153;				\/\/ in atomic units, this is the mass of a proton. Mass of electron = 1.0$/;"	v
MU_DERIV_LENGTH	watersfg.h	/^const double MU_DERIV_LENGTH = MU_DERIV_MAGNITUDE * OH_COM_LENGTH;		\/\/ length of the differential dipole moment element used in calculating the dipole-dipole interaction energy (in atomic units)$/;"	v
MU_DERIV_MAGNITUDE	watersfg.h	/^const double MU_DERIV_MAGNITUDE = sqrt(-0.058*-0.058 + 0.157*0.157);$/;"	v
Magnitude	dipoleparm.h	/^	double Magnitude (double r1, double r2, double theta) { return _Data(r1, r2, theta)[3]; }$/;"	f	class:WaterDipoleParms
Mass	atom.h	/^	double Mass () const 	{ return _mass; }$/;"	f	class:Atom
Mass	molecule.h	/^	double Mass () const 			{ return _mass; }					\/\/ Returns the molecular mass$/;"	f	class:Molecule
Masses	topfile.h	/^	std::vector<double>& Masses () 	{ return _masses; }$/;"	f	class:TOPFile
Master	ambermpisys.h	/^	bool Master () const 		{ return _master; }$/;"	f	class:MPIMolSystem
MatR	matrixr.h	/^	MatR () : _matrix(3, Double_vector(3)) { }$/;"	f	class:MatR
MatR	matrixr.h	/^	MatR (const Double_matrix& elements) : _matrix(elements) { }$/;"	f	class:MatR
MatR	matrixr.h	/^	MatR (const MatR& oldMat) : _matrix(oldMat._matrix) { }$/;"	f	class:MatR
MatR	matrixr.h	/^	MatR (double * const elements) : _matrix(3, Double_vector(3)) {$/;"	f	class:MatR
MatR	matrixr.h	/^class MatR {$/;"	c
Matrix	matrixr.h	/^	Double_matrix& Matrix() { return _matrix; }$/;"	f	class:MatR
Max	histogram.h	/^	double Max () { return _max; }$/;"	f	class:Histogram
Min	histogram.h	/^	double Min () { return _min; }$/;"	f	class:Histogram
MinVector	atom.h	/^	VecR MinVector (const Atom * input) const {$/;"	f	class:Atom
MolID	atom.h	/^	int MolID () const		{ return _molid; }$/;"	f	class:Atom
MolID	atom.h	/^	void MolID (const int mol) { _molid = mol; }	\/\/ sets the ID of the molecule containing this atom$/;"	f	class:Atom
MolID	molecule.h	/^	int MolID () const				{ return _ID; }$/;"	f	class:Molecule
MolID	molecule.h	/^	void MolID (int ID) { _ID = ID; }$/;"	f	class:Molecule
MolNames	topfile.h	/^	std::vector<std::string>& MolNames () { return _molnames; }$/;"	f	class:TOPFile
MolPointers	topfile.h	/^	std::vector<int>& MolPointers () { return _molpointers; }$/;"	f	class:TOPFile
MolSizes	topfile.h	/^	std::vector<int>& MolSizes ()	{ return _molsizes; }$/;"	f	class:TOPFile
Mol_ptr_vec	mdsystem.h	/^typedef std::vector<Molecule *> Mol_ptr_vec;$/;"	t
Mol_ptr_vec	molecule.h	/^typedef std::vector<Molecule *> Mol_ptr_vec;$/;"	t
Mol_vec	molecule.h	/^typedef std::vector<Molecule> Mol_vec;$/;"	t
Molecule	molecule.h	/^class Molecule {$/;"	c
Molecules	ambermpisys.h	/^	Molecule * Molecules (int index) { return &_mols[index]; }$/;"	f	class:MPIMolSystem
Molecules	mdsystem.h	/^	Mol_ptr_vec& Molecules () { return _mols; }$/;"	f	class:MDSystem
Molecules	mdsystem.h	/^	Molecule * Molecules (int index) { return _mols[index]; }$/;"	f	class:MDSystem
Molecules	pdbfile.h	/^	vector<Molecule *>& Molecules () { return _molecules; }$/;"	f	class:PDBFile
MoritaSFG	moritasfg2002.h	/^	MoritaSFG () : _T_set(false) { ; }$/;"	f	class:MoritaSFG
MoritaSFG	moritasfg2002.h	/^class MoritaSFG {$/;"	c
MuDeriv1	watersfg.h	/^	VecR MuDeriv1;				\/\/ dipole derivative vector from the paper$/;"	m	class:SFGCalculator
MuDeriv2	watersfg.h	/^	VecR MuDeriv2;				\/\/ dipole derivative of the 2nd OH bond in the frame of the first$/;"	m	class:SFGCalculator
MyVertex	bondgraph.h	/^typedef boost::graph_traits<Graph>::vertex_descriptor MyVertex;$/;"	t
MyVertex_it	bondgraph.h	/^typedef boost::graph_traits<Graph>::vertex_iterator MyVertex_it;$/;"	t
NHBONDLENGTH	bond.h	/^const double NHBONDLENGTH = 1.3;		\/\/ uhmm... check this?$/;"	v
NHBONDLENGTH	bondgraph.h	/^const double NHBONDLENGTH = 1.3;		\/\/ uhmm... check this?$/;"	v
NHBONDLENGTH	connectmatrix.h	/^const double NHBONDLENGTH = 1.3;		\/\/ uhmm... check this?$/;"	v
NHBONDLENGTH	graph.h	/^const double NHBONDLENGTH = 1.3;		\/\/ uhmm... check this?$/;"	v
NO1	hno3.h	/^	VecR const * NO1 () { return &_no1; }$/;"	f	class:Nitrate
NO2	hno3.h	/^	VecR const * NO2 () { return &_no2; }$/;"	f	class:Nitrate
NO2Dipole	hno3.h	/^	VecR NO2Dipole () const { return _no2dipole; }$/;"	f	class:NitricAcid
NO2Wanniers	hno3.h	/^	const std::vector<VecR>& NO2Wanniers () const { return _no2wanniers; }$/;"	f	class:NitricAcid
NO3	hno3.h	/^	VecR const * NO3 () { return &_no3; }$/;"	f	class:Nitrate
NO3Rotation	wateranalyzer.h	/^trajectory WaterAnalyzer::NO3Rotation () {$/;"	f	class:WaterAnalyzer
NOBONDLENGTH	bond.h	/^const double NOBONDLENGTH = 2.0;$/;"	v
NOBONDLENGTH	bondgraph.h	/^const double NOBONDLENGTH = 2.0;$/;"	v
NOBONDLENGTH	connectmatrix.h	/^const double NOBONDLENGTH = 2.0;$/;"	v
NOBONDLENGTH	graph.h	/^const double NOBONDLENGTH = 2.0;$/;"	v
NO_BOND	wateranalyzer.h	9;"	d
NUM_STEP	watersfg.h	/^const double NUM_STEP			= (END_FREQ-START_FREQ)\/FREQ_STEP;$/;"	v
Name	atom.h	/^	std::string Name () const 	{ return (_name); }$/;"	f	class:Atom
Name	atom.h	/^	void Name (const std::string name) { _name = name; }$/;"	f	class:Atom
Name	molecule.h	/^	string Name () const			{ return _name; }$/;"	f	class:Molecule
Name	molecule.h	/^	void Name (string name) { _name = name; }	\/\/ set the molecule's name$/;"	f	class:Molecule
Nitrate	hno3.h	/^class Nitrate: public Molecule {$/;"	c
NitricAcid	hno3.h	/^class NitricAcid: public Molecule {$/;"	c
Node	node.h	/^class Node {$/;"	c
Node_it	node.h	/^typedef std::list<Node *>::iterator Node_it;$/;"	t
Node_ptr_list	node.h	/^typedef std::list<Node *> Node_ptr_list;$/;"	t
Normal	h2o.h	/^	VecR Normal () const { return _y; }$/;"	f	class:Water
NumAtoms	ambermpisys.h	/^	int NumAtoms () { return _numAtoms; }$/;"	f	class:MPIMolSystem
NumAtoms	mdsystem.h	/^	const int NumAtoms ()	const { return (int)_atoms.size(); }$/;"	f	class:MDSystem
NumAtoms	topfile.h	/^	int NumAtoms () const { return _numAtoms; }$/;"	f	class:TOPFile
NumBins	histogram.h	/^	double NumBins () { return _numBins; }$/;"	f	class:Histogram
NumBonds	adjacencymatrix.h	/^	int NumBonds (Atom const * const ap) {$/;"	f	class:AdjacencyMatrix
NumHBonds	adjacencymatrix.h	/^	int NumHBonds (Atom const * const ap) {$/;"	f	class:AdjacencyMatrix
NumMols	ambermpisys.h	/^	int NumMols () { return _numMols; }$/;"	f	class:MPIMolSystem
NumMols	mdsystem.h	/^	const int NumMols () const { return _mols.size(); }$/;"	f	class:MDSystem
NumMols	topfile.h	/^	int NumMols () const { return _numMols; }$/;"	f	class:TOPFile
NumSteps	mdsystem.h	/^	virtual const int NumSteps () const { return _numTimeSteps; }$/;"	f	class:MDSystem
NumSteps	xyzfile.h	/^	int NumSteps () const { return _numSteps; }$/;"	f	class:XYZFile
NumSteps	xyzsystem.h	/^	const int NumSteps () const { return _coords.NumSteps(); }		\/\/ number of timesteps in the xyzfile$/;"	f	class:XYZSystem
O	bond.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon3
O	bondgraph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon1
O	connectmatrix.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon5
O	graph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon7
OH	bond.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon3
OH	bondgraph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon1
OH	connectmatrix.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon5
OH	graph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon7
OH	hno3.h	/^	VecR& OH () { return _voh; }$/;"	f	class:NitricAcid
OH	oh.h	/^	VecR const * OH () const { return &_oh; }$/;"	f	class:Hydroxide
OH1	h2o.h	/^	VecR const * OH1 () const { return &_oh1; }$/;"	f	class:Water
OH1	h3o.h	/^	VecR const * OH1 () const { return &_oh1; }$/;"	f	class:Hydronium
OH2	h2o.h	/^	VecR const * OH2 () const { return &_oh2; }$/;"	f	class:Water
OH2	h3o.h	/^	VecR const * OH2 () const { return &_oh2; }$/;"	f	class:Hydronium
OH3	h3o.h	/^	VecR const * OH3 () const { return &_oh3; }$/;"	f	class:Hydronium
OHBONDLENGTH	bond.h	/^const double OHBONDLENGTH = 1.3;				\/\/ used to be 1.1$/;"	v
OHBONDLENGTH	bondgraph.h	/^const double OHBONDLENGTH = 1.3;				\/\/ used to be 1.1$/;"	v
OHBONDLENGTH	connectmatrix.h	/^const double OHBONDLENGTH = 1.0;$/;"	v
OHBONDLENGTH	graph.h	/^const double OHBONDLENGTH = 1.3;				\/\/ used to be 1.1$/;"	v
OHH	bond.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon3
OHH	bondgraph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon1
OHH	connectmatrix.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon5
OHH	graph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon7
OHHH	bond.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon3
OHHH	bondgraph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon1
OHHH	connectmatrix.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon5
OHHH	graph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon7
OHHHH	bond.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon3
OHHHH	bondgraph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon1
OHHHH	connectmatrix.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon5
OHHHH	graph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon7
OH_COM_LENGTH	watersfg.h	/^const double OH_COM_LENGTH = MHYD*OH_LENGTH\/(MHYD+MOXY);	\/\/ distance to the center of mass of the OH bond from the oxygen (atomic units of length)$/;"	v
OH_H_	oh.h	2;"	d
OH_LENGTH	watersfg.h	/^const double OH_LENGTH = 1.000*ANG2BOHR;	\/\/ in atomic units$/;"	v
OO	bond.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon3
OO	bondgraph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon1
OO	connectmatrix.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon5
OO	graph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon7
OOH	bond.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon3
OOH	bondgraph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon1
OOH	connectmatrix.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon5
OOH	graph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon7
OOHH	bond.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon3
OOHH	bondgraph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon1
OOHH	connectmatrix.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon5
OOHH	graph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon7
OOHHH	bond.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon3
OOHHH	bondgraph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon1
OOHHH	connectmatrix.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon5
OOHHH	graph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon7
OOHHHH	bond.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon3
OOHHHH	bondgraph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon1
OOHHHH	connectmatrix.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon5
OOHHHH	graph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon7
OOO	bond.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon3
OOO	bondgraph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon1
OOO	connectmatrix.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon5
OOO	graph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon7
OOOH	bond.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon3
OOOH	bondgraph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon1
OOOH	connectmatrix.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon5
OOOH	graph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon7
OOOHH	bond.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon3
OOOHH	bondgraph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon1
OOOHH	connectmatrix.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon5
OOOHH	graph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon7
OOOHHH	bond.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon3
OOOHHH	bondgraph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon1
OOOHHH	connectmatrix.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon5
OOOHHH	graph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon7
OOOHHHH	bond.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon3
OOOHHHH	bondgraph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon1
OOOHHHH	connectmatrix.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon5
OOOHHHH	graph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon7
OOOO	bond.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon3
OOOO	bondgraph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon1
OOOO	connectmatrix.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon5
OOOO	graph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon7
OOOOH	bond.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon3
OOOOH	bondgraph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon1
OOOOH	connectmatrix.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon5
OOOOH	graph.h	/^	H=10, OH=11, OOH=12, OOOH=13, OOOOH=14,			\/\/ 1 H$/;"	e	enum:__anon7
OOOOHH	bond.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon3
OOOOHH	bondgraph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon1
OOOOHH	connectmatrix.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon5
OOOOHH	graph.h	/^	HH=20, OHH=21, OOHH=22, OOOHH=23, OOOOHH=24,		\/\/ 2 Hs$/;"	e	enum:__anon7
OOOOHHH	bond.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon3
OOOOHHH	bondgraph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon1
OOOOHHH	connectmatrix.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon5
OOOOHHH	graph.h	/^	HHH=30, OHHH=31, OOHHH=32, OOOHHH=33, OOOOHHH=34,	\/\/ 3 Hs$/;"	e	enum:__anon7
OOOOHHHH	bond.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon3
OOOOHHHH	bondgraph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon1
OOOOHHHH	connectmatrix.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon5
OOOOHHHH	graph.h	/^	HHHH=40, OHHHH=41, OOHHHH=42, OOOHHHH=43, OOOOHHHH=44$/;"	e	enum:__anon7
OpenFile	watersystem.h	/^void WaterSystem<T>::OpenFile () {$/;"	f	class:WaterSystem
PARAMS	boxfiller.h	10;"	d
PDBFILE	boxfiller.h	11;"	d
PDBFILE_H_	pdbfile.h	2;"	d
PDBFile	pdbfile.h	/^class PDBFile {$/;"	c
PMOL_IT	molecule.h	/^typedef std::vector<Molecule *>::iterator PMOL_IT;$/;"	t
PREFACTOR	watersfg.h	/^const double PREFACTOR	=	sqrt(k0\/M)*(l\/(2.0*k0*k0));		\/\/ the prefactor to multiply the bond force for freq shift (in atomic units) (eq 10c)$/;"	v
PRINTV	utility.h	20;"	d
PRINTV2	utility.h	23;"	d
ParentMolecule	atom.h	/^	Molecule * ParentMolecule () const { return _pmolecule; }$/;"	f	class:Atom
ParentMolecule	atom.h	/^	void ParentMolecule (Molecule * mol) { _pmolecule = mol; }	\/\/ sets a pointer to the molecule that contains the atom$/;"	f	class:Atom
Position	atom.h	/^	const VecR& Position () const	{ return _position; }$/;"	f	class:Atom
Position	atom.h	/^	void Position (const VecR& position) { _position = position; }$/;"	f	class:Atom
Position	atom.h	/^	void Position (coord const axis, double const value) { _position.Set (axis, value); }$/;"	f	class:Atom
Position	atom.h	/^	void Position (double X, double Y, double Z) { _position.Set(X, Y, Z); }$/;"	f	class:Atom
Procs	ambermpisys.h	/^	int Procs () const 			{ return _p; }$/;"	f	class:MPIMolSystem
PropertyMap	graph.h	/^template <class T, class Property_T> struct PropertyMap$/;"	s
Q_H_eq	moritasfg2002.h	/^const double Q_H_eq		= 0.3285;		\/\/ charge units (atomic units?)$/;"	v
Q_O_eq	moritasfg2002.h	/^const double Q_O_eq		= -0.6570;$/;"	v
RANDOM	boxfiller.h	13;"	d
RDF	rdf.h	/^vector<double> RDF (string atomName1, string atomName2, vector<Atom *>& sys) {$/;"	f
RDF	wateranalyzer.h	/^vector<double> WaterAnalyzer::RDF (string atomName1, string atomName2) {$/;"	f	class:WaterAnalyzer
RUN	utility.h	8;"	d
RUN2	utility.h	15;"	d
R_OH	hno3analysis.h	/^const double R_OH = 2.45;			\/\/ This is the max value of an H-bond length (from rdf data)$/;"	v
R_OH_H3O_mean	hno3analysis.h	/^const double R_OH_H3O_mean = 1.029;	  \/\/ same but for hydronium$/;"	v
R_OH_HNO3_mean	hno3analysis.h	/^const double R_OH_HNO3_mean = 1.016;  \/\/ avg OH distance on the NO3 according to Hynes... should be recalculate for each simulation.$/;"	v
R_OO	hno3analysis.h	/^const double R_OO = 3.5;			\/\/ These values are the maximums for defining H-bonds between the acceptor water and hno3.$/;"	v
R_eq	moritasfg2002.h	/^const double R_eq 		= 0.9575;		\/\/ in angstroms$/;"	v
Reset	watersfg.h	/^	void Reset () { _set = false; }$/;"	f	class:SFGCalculator
Residue	atom.h	/^	std::string Residue () const { return _residue; }$/;"	f	class:Atom
Residue	atom.h	/^	void Residue (std::string residue) { _residue = residue; }$/;"	f	class:Atom
Return	thread.h	/^	void * Return () const { return _return; }$/;"	f	class:Thread
SFGCalculator	watersfg.h	/^class SFGCalculator {$/;"	c
SPACING	boxfiller.h	12;"	d
START_FREQ	watersfg.h	/^const double START_FREQ			= 2800.0\/AU2WAVENUMBER;$/;"	v
Set	matrixr.h	/^	void	Set (const MatR& input)$/;"	f	class:MatR
Set	molecule.h	/^	bool Set () { _set = true; return (_set); }$/;"	f	class:Molecule
Set	vecr.h	/^	void Set (const coord axis, const double val) { _coords[axis] = val; }$/;"	f	class:VecR
Set	vecr.h	/^	void Set (double X, double Y, double Z) {$/;"	f	class:VecR
SetBond	adjacencymatrix.h	/^	void SetBond (Atom const * const a1, Atom const * const a2, const bondtype btype) {$/;"	f	class:AdjacencyMatrix
Size	atom.h	/^	static const VecR& Size ()	{ return _size; }$/;"	f	class:Atom
Size	atom.h	/^	static void Size (VecR size) { _size = size; }	\/\/ sets the system size$/;"	f	class:Atom
SliceWaterCoordination	watersystem.h	/^void WaterSystem<T>::SliceWaterCoordination (const coordination coord) {$/;"	f	class:WaterSystem
SliceWaters	watersystem.h	/^void WaterSystem<T>::SliceWaters (const double low, const double high) {$/;"	f	class:WaterSystem
Stat	ambermpisys.h	/^	MPI_Status * Stat () 		{ return &_stat; }$/;"	f	class:MPIMolSystem
SysDipoleCorrelation	wateranalyzer.h	/^trajectory WaterAnalyzer::SysDipoleCorrelation () {$/;"	f	class:WaterAnalyzer
SysType	graph.h	/^	void SysType (std::string sys_type) { _sys_type = sys_type; }$/;"	f	class:BondGraph
System	wateranalyzer.h	/^	WaterSystem&	System() { return _sys; }$/;"	f	class:WaterAnalyzer
THREAD_H_	thread.h	2;"	d
TOPFILE_H_	topfile.h	2;"	d
TOPFile	topfile.h	/^class TOPFile {$/;"	c
Tensor	dipolefieldtensor.h	/^	double const * Tensor () { return _tensor; }$/;"	f	class:DipoleFieldTensor
Theta_eq	moritasfg2002.h	/^const double Theta_eq 	= 104.51;		\/\/ in degrees$/;"	v
Thread	thread.h	/^	Thread () {}$/;"	f	class:Thread
Thread	thread.h	/^Thread<T>::Thread (fct_ptr f, void * arg) $/;"	f	class:Thread
Thread	thread.h	/^class Thread {$/;"	c
Ttensor	moritasfg2002.h	/^typedef std::vector< std::vector< MatR > > Ttensor;$/;"	t
Type	graph.h	/^	typedef typename boost::property_map<Graph, T Property_T::*>::type Type;$/;"	t	struct:PropertyMap
UNBOUND	bond.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon3
UNBOUND	bondgraph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon1
UNBOUND	connectmatrix.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon5
UNBOUND	graph.h	/^	UNBOUND=0, O=1, OO=2, OOO=3, OOOO=4, 			\/\/ no H$/;"	e	enum:__anon7
UNCOUPLED_OH_FREQ	watersfg.h	/^const double UNCOUPLED_OH_FREQ	= 3706.5\/AU2WAVENUMBER;			\/\/ the frequency of uncoupled OH bonds in the vapor phase (converted to frequency in atomic units)$/;"	v
UTILITY_H_	utility.h	2;"	d
Unset	molecule.h	/^	bool Unset () { _set = false; return (_set); }$/;"	f	class:Molecule
UpdateGraph	watersystem.h	/^	void UpdateGraph () { graph.UpdateGraph (int_atoms); }$/;"	f	class:WaterSystem
VECR_H_	vecr.h	2;"	d
VecR	vecr.h	/^class VecR {$/;"	c
Vertex	graph.h	/^typedef boost::graph_traits<Graph>::vertex_descriptor Vertex;$/;"	t
VertexProperties	bondgraph.h	/^struct VertexProperties {$/;"	s
VertexProperties	graph.h	/^struct VertexProperties {$/;"	s
Vertex_it	graph.h	/^typedef boost::graph_traits<Graph>::vertex_iterator Vertex_it;$/;"	t
WANNIER_BOND	wannier.h	9;"	d
WANNIER_H_	wannier.h	2;"	d
WATERSFG_H_	watersfg.h	2;"	d
WATERSYSTEM_H_	watersystem.h	2;"	d
WannierFile	wannier.h	/^	WannierFile () { }$/;"	f	class:WannierFile
WannierFile	wannier.h	/^class WannierFile {$/;"	c
Wanniers	molecule.h	/^	const std::vector<VecR>& Wanniers ()		const { return _wanniers; }$/;"	f	class:Molecule
Wanniers	xyzsystem.h	/^	const std::vector<VecR>& Wanniers () const { return _wanniers.Coords(); }$/;"	f	class:XYZSystem
Water	h2o.h	/^class Water: public Molecule {$/;"	c
WaterAnalyzer	wateranalyzer.h	/^	WaterAnalyzer (WaterSystem& system) : _sys(system) {}		\/\/ Constructor that grabs the system and loads it up$/;"	f	class:WaterAnalyzer
WaterAnalyzer	wateranalyzer.h	/^class WaterAnalyzer {$/;"	c
WaterDipoleParms	dipoleparm.h	/^class WaterDipoleParms {$/;"	c
WaterSystem	watersystem.h	/^WaterSystem<T>::WaterSystem (const WaterSystemParams& params)$/;"	f	class:WaterSystem
WaterSystem	watersystem.h	/^class WaterSystem {$/;"	c
WaterSystemParams	watersystem.h	/^	WaterSystemParams ($/;"	f	struct:WaterSystemParams
WaterSystemParams	watersystem.h	/^struct WaterSystemParams {$/;"	s
Water_ptr_vec	h2o.h	/^typedef std::vector<Water *> Water_ptr_vec;$/;"	t
Water_ptr_vec	h3o.h	/^typedef std::vector<Water *> Water_ptr_vec;$/;"	t
Water_vec	h2o.h	/^typedef std::vector<Water> Water_vec;$/;"	t
Water_vec	h3o.h	/^typedef std::vector<Water> Water_vec;$/;"	t
WorldComm	ambermpisys.h	/^	MPI_Comm WorldComm () const { return _worldcomm; }$/;"	f	class:MPIMolSystem
X	atom.h	/^	double X () const 		{ return _position[x]; }$/;"	f	class:Atom
X	atom.h	/^	void X (double val) { _position.X(val); }			\/\/ for setting the atom's position$/;"	f	class:Atom
X	molecule.h	/^	VecR X () const					{ return _x; }$/;"	f	class:Molecule
X	molecule.h	/^	void X (VecR& x_axis) { _x = x_axis; }$/;"	f	class:Molecule
X	vecr.h	/^	void X (const double val) { _coords[x] = val; }$/;"	f	class:VecR
XYZFILE_H_	xyzfile.h	2;"	d
XYZFile	xyzfile.h	/^	XYZFile () {}$/;"	f	class:XYZFile
XYZFile	xyzfile.h	/^class XYZFile {$/;"	c
XYZSYSTEM_H_	xyzsystem.h	2;"	d
XYZSystem	xyzsystem.h	/^	XYZSystem () { _graph.SysType("xyz"); }$/;"	f	class:XYZSystem
XYZSystem	xyzsystem.h	/^class XYZSystem : public MDSystem {$/;"	c
XYZWATERSYSTEM_H_	xyzwatersystem.h	2;"	d
XYZWaterSystem	xyzwatersystem.h	/^	XYZWaterSystem (const WaterSystemParams& params, std::string const xyzfilepath, const VecR& size, std::string const wanniers = "")$/;"	f	class:XYZWaterSystem
XYZWaterSystem	xyzwatersystem.h	/^class XYZWaterSystem : public WaterSystem<XYZSystem> {$/;"	c
Y	atom.h	/^	double Y () const		{ return _position[y]; }$/;"	f	class:Atom
Y	atom.h	/^	void Y (double val) { _position.Y(val); }$/;"	f	class:Atom
Y	molecule.h	/^	VecR Y () const					{ return _y; }$/;"	f	class:Molecule
Y	molecule.h	/^	void Y (VecR& y_axis) { _y = y_axis; }$/;"	f	class:Molecule
Y	vecr.h	/^	void Y (const double val) { _coords[y] = val; }$/;"	f	class:VecR
Z	atom.h	/^	double Z () const 		{ return _position[z]; }$/;"	f	class:Atom
Z	atom.h	/^	void Z (double val) { _position.Z(val); }$/;"	f	class:Atom
Z	molecule.h	/^	VecR Z () const					{ return _z; }$/;"	f	class:Molecule
Z	molecule.h	/^	void Z (VecR& z_axis) { _z = z_axis; }$/;"	f	class:Molecule
Z	vecr.h	/^	void Z (const double val) { _coords[z] = val; }$/;"	f	class:VecR
ZCoordHistogram	wateranalyzer.h	/^vector< vector<int> > WaterAnalyzer::ZCoordHistogram ( double DZ ) {$/;"	f	class:WaterAnalyzer
Zero	matrixr.h	/^	void Zero () {								\/\/ Zero all elements of a matrix$/;"	f	class:MatR
_A	moritasfg2002.h	/^	MatR					_A;$/;"	m	class:MoritaSFG
_AlphaDerivA	watersfg.h	/^	double _AlphaDerivA, _AlphaDerivS;$/;"	m	class:SFGCalculator
_AlphaDerivS	watersfg.h	/^	double _AlphaDerivA, _AlphaDerivS;$/;"	m	class:SFGCalculator
_Beta	watersfg.h	/^	std::vector< complex<double> > _Beta;		\/\/ hyperpolarizability of a given water (in the molecular frame)$/;"	m	class:SFGCalculator
_C1a	watersfg.h	/^	double _C1a, _C2a;		\/\/ and the anti-symmetric case$/;"	m	class:SFGCalculator
_C1s	watersfg.h	/^	double _C1s, _C2s;		\/\/ The coefficients that are solved for in the matrix equation (Eq. 8) for the symmetric case$/;"	m	class:SFGCalculator
_C2a	watersfg.h	/^	double _C1a, _C2a;		\/\/ and the anti-symmetric case$/;"	m	class:SFGCalculator
_C2s	watersfg.h	/^	double _C1s, _C2s;		\/\/ The coefficients that are solved for in the matrix equation (Eq. 8) for the symmetric case$/;"	m	class:SFGCalculator
_Chi	watersfg.h	/^	std::vector< complex<double> > _Chi;		\/\/ hyperpolarizability of a given water (in the molecular frame)$/;"	m	class:SFGCalculator
_DCM	molecule.h	/^	MatR			_DCM;				\/\/ the direction cosine matrix for rotating the molecule to the lab frame$/;"	m	class:Molecule
_DCM	watersfg.h	/^	MatR _DCM;				\/\/ rotation matrix for moving from the water molecular frame to the lab frame$/;"	m	class:SFGCalculator
_DENSITY_H_	density.h	2;"	d
_ID	atom.h	/^	int    _ID;				\/\/ some numerical identifier in case the atom is in an ordered list$/;"	m	class:Atom
_ID	molecule.h	/^	int				_ID;				\/\/ A numerical ID for the molecule$/;"	m	class:Molecule
_ID	wannier.h	/^	int				_ID;$/;"	m	class:WannierFile
_InitAtoms	ambermpisys.h	/^void MPIMolSystem::_InitAtoms () {$/;"	f	class:MPIMolSystem
_LINALG_	matrixr.h	12;"	d
_MPIFinalize	ambermpisys.h	/^void MPIMolSystem::_MPIFinalize () {$/;"	f	class:MPIMolSystem
_MPISystemInit	ambermpisys.h	/^void MPIMolSystem::_MPISystemInit (int *argc, char ***argv) {$/;"	f	class:MPIMolSystem
_MolSystemInit	ambermpisys.h	/^void MPIMolSystem::_MolSystemInit (string prmtop, string mdcrd, string mdvel) {$/;"	f	class:MPIMolSystem
_MuDerivA	watersfg.h	/^	double _MuDerivA, _MuDerivS;			\/\/ the total mu derivative with the eigenvector weighting from Eq 7.$/;"	m	class:SFGCalculator
_MuDerivS	watersfg.h	/^	double _MuDerivA, _MuDerivS;			\/\/ the total mu derivative with the eigenvector weighting from Eq 7.$/;"	m	class:SFGCalculator
_N	moritasfg2002.h	/^	int						_N;		\/\/ number of waters$/;"	m	class:MoritaSFG
_OH1FreqShift	watersfg.h	/^	double _OH1FreqShift, _OH2FreqShift;		\/\/ The two frequency shift values calculated from the forces on the OH bonds$/;"	m	class:SFGCalculator
_OH2FreqShift	watersfg.h	/^	double _OH1FreqShift, _OH2FreqShift;		\/\/ The two frequency shift values calculated from the forces on the OH bonds$/;"	m	class:SFGCalculator
_ParseMols	ambermpisys.h	/^void MPIMolSystem::_ParseMols () {$/;"	f	class:MPIMolSystem
_T	moritasfg2002.h	/^	Dbl_mtr					_T;		\/\/ Dipole field tensor$/;"	m	class:MoritaSFG
_T_set	moritasfg2002.h	/^	bool					_T_set;$/;"	m	class:MoritaSFG
_UpdateCoords	ambermpisys.h	/^void MPIMolSystem::_UpdateCoords () {$/;"	f	class:MPIMolSystem
_alpha	h2o.h	/^	MatR _alpha;					\/\/ polarizability of the molecule$/;"	m	class:Water
_alpha	moritasfg2002.h	/^	Dbl_mtr					_alpha;	\/\/ polarizabilities of the waters$/;"	m	class:MoritaSFG
_alphe_eff	moritasfg2002.h	/^	Dbl_mtr					_alphe_eff;		\/\/ effective polarizability taking into account the local-field$/;"	m	class:MoritaSFG
_ap	analysis.h	/^	T _ap;$/;"	m	class:Analyzer
_arg	thread.h	/^	T * _arg;	$/;"	m	class:Thread
_atomnames	topfile.h	/^	std::vector<std::string> _atomnames;		\/\/ The listing of the atoms in the file$/;"	m	class:TOPFile
_atoms	adjacencymatrix.h	/^	Atom_ptr_vec	_atoms;		\/\/ the atoms in the system$/;"	m	class:AdjacencyMatrix
_atoms	ambermpisys.h	/^	vector<Atom> _atoms;$/;"	m	class:MPIMolSystem
_atoms	connectmatrix.h	/^	Atom **		_atoms;			\/\/ the atoms in the system$/;"	m	class:AdjacencyMatrix
_atoms	mdsystem.h	/^	Atom_ptr_vec	_atoms;		\/\/ the atoms in the system$/;"	m	class:MDSystem
_atoms	molecule.h	/^	Atom_ptr_vec 		_atoms;				\/\/ the list of the atoms in the molecule$/;"	m	class:Molecule
_atoms	pdbfile.h	/^	vector<Atom *> _atoms;$/;"	m	class:PDBFile
_atoms	xyzfile.h	/^	std::vector<Atom *> _atoms;		\/\/ The listing of the atoms in the file$/;"	m	class:XYZFile
_attr	thread.h	/^	pthread_attr_t	* _attr;$/;"	m	class:Thread
_binSize	histogram.h	/^	double _binSize;$/;"	m	class:Histogram
_boxSize	boxfiller.h	/^	VecR	_boxSize;	\/\/ system size$/;"	m	class:BoxFiller
_built	adjacencymatrix.h	/^	bool 			_built;		\/\/ has the matrix been built to the current size?$/;"	m	class:AdjacencyMatrix
_carbons	carbonchain.h	/^		vector<Atom *> _carbons;		\/* An ordered listing of all the carbons in$/;"	m	class:CarbonChain
_centerofmass	molecule.h	/^	VecR			_centerofmass;		\/\/ calculate by 1\/M * Sum(m[i]*r[i])	where M = total mass, m[i] and r[i] are atom mass and pos$/;"	m	class:Molecule
_charge	atom.h	/^		   _charge;$/;"	m	class:Atom
_charge	molecule.h	/^	double			_charge;$/;"	m	class:Molecule
_charges	topfile.h	/^	std::vector<double> _charges;		\/\/ atomic charges$/;"	m	class:TOPFile
_complex	complexdatafile.h	/^	std::vector<std::complex<double> > 	_complex;$/;"	m	class:ComplexDataFile
_coords	ambersystem.h	/^	CRDFile		_coords;$/;"	m	class:AmberSystem
_coords	crdfile.h	/^	std::vector<VecR>	_coords;	\/\/ atomic coordinates$/;"	m	class:CRDFile
_coords	vecr.h	/^	Double_vector	_coords;$/;"	m	class:VecR
_coords	wannier.h	/^	std::vector<VecR>	_coords;	\/\/ atomic coordinates$/;"	m	class:WannierFile
_coords	xyzsystem.h	/^	XYZFile				_coords;			\/\/ Atomlist parsed from an xyz file$/;"	m	class:XYZSystem
_currentstep	pdbfile.h	/^		_currentstep;$/;"	m	class:PDBFile
_currentstep	xyzfile.h	/^	int _currentstep, _firstStep, _lastStep, _numSteps,$/;"	m	class:XYZFile
_data	complexdatafile.h	/^	std::vector<double>			_data;$/;"	m	class:ComplexDataFile
_data	dipoleparm.h	/^	double			****_data;		\/\/ pointer arrays that will get us the data we need$/;"	m	class:WaterDipoleParms
_dims	crdfile.h	/^	VecR			_dims;		\/\/ Dimensions of the system (box size)$/;"	m	class:CRDFile
_dims	mdsystem.h	/^	VecR			_dims;		\/\/ system dimensions - size$/;"	m	class:MDSystem
_dipole	molecule.h	/^	VecR			_dipole;			\/\/ the molecular dipole$/;"	m	class:Molecule
_dipparms	h2o.h	/^	static WaterDipoleParms _dipparms;		\/\/ The water dipole parameter file$/;"	m	class:Water
_distance	dipolefieldtensor.h	/^	double _distance;	\/\/ scalar distance between the two molecules$/;"	m	class:DipoleFieldTensor
_dr	dipoleparm.h	/^	double			_dr[3];				\/\/ bin size$/;"	m	class:WaterDipoleParms
_eigenset	matrixr.h	/^	bool _eigenset;$/;"	m	class:MatR
_eigenvalsI	matrixr.h	/^	double _eigenvalsI[3];$/;"	m	class:MatR
_eigenvalsR	matrixr.h	/^	double _eigenvalsR[3];$/;"	m	class:MatR
_eigenvecs	matrixr.h	/^	double _eigenvecs[9];$/;"	m	class:MatR
_eof	crdfile.h	/^	bool			_eof;		\/\/ end of file marker for the coord file$/;"	m	class:CRDFile
_eof	forcefile.h	/^	bool			_eof;		\/\/ end of file marker for the force file$/;"	m	class:ForceFile
_eof	wannier.h	/^	bool			_eof;		\/\/ end of file marker for the coord file$/;"	m	class:WannierFile
_errcode	thread.h	/^	int _errcode;$/;"	m	class:Thread
_eulerangles	molecule.h	/^	double			_eulerangles[3];	\/\/ the three euler angles theta, phi, chi$/;"	m	class:Molecule
_file	complexdatafile.h	/^	std::ifstream				_file;$/;"	m	class:ComplexDataFile
_file	crdfile.h	/^	FILE 			*_file;$/;"	m	class:CRDFile
_file	dipoleparm.h	/^	FILE 			*_file;$/;"	m	class:WaterDipoleParms
_file	forcefile.h	/^	FILE 			*_file;$/;"	m	class:ForceFile
_file	pdbfile.h	/^	FILE *_file;				\/\/ the PDB file listing all the atom coordinates$/;"	m	class:PDBFile
_file	wannier.h	/^	FILE *			_file;$/;"	m	class:WannierFile
_file	xyzfile.h	/^	FILE *_file;				\/\/ the XYZ file listing all the atom coordinates$/;"	m	class:XYZFile
_firstStep	xyzfile.h	/^	int _currentstep, _firstStep, _lastStep, _numSteps,$/;"	m	class:XYZFile
_force	atom.h	/^	VecR _force;			\/\/ the external force on the atom at any given point in time$/;"	m	class:Atom
_forces	ambermpisys.h	/^	double * _forces;$/;"	m	class:MPIMolSystem
_forces	ambersystem.h	/^	ForceFile	_forces;$/;"	m	class:AmberSystem
_forces	forcefile.h	/^	std::vector<VecR>	_forces;	\/\/ atomic coordinates$/;"	m	class:ForceFile
_frame	crdfile.h	/^	int 			_frame;		\/\/ The current frame (number of timesteps processed)$/;"	m	class:CRDFile
_frame	forcefile.h	/^	int 			_frame;		\/\/ The current frame (number of timesteps processed)$/;"	m	class:ForceFile
_frame	wannier.h	/^	int 			_frame;		\/\/ The current frame (number of timesteps processed)$/;"	m	class:WannierFile
_function	thread.h	/^	void * (* _function) (void *);$/;"	m	class:Thread
_graph	bondgraph.h	/^	Graph	_graph;$/;"	m	class:BondGraph
_graph	graph.h	/^	static Graph _graph;$/;"	m	class:BondGraph
_graph	watersfg.h	/^	BondGraph * _graph;		\/\/ a connectivity matrix for analyzing water-bonding$/;"	m	class:SFGCalculator
_graph	xyzsystem.h	/^	BondGraph			_graph;			\/\/ a really useful graph for playing with atoms and bonds$/;"	m	class:XYZSystem
_h	hno3.h	/^	Atom *_oh, *_n, *_h, *_o1, *_o2;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:NitricAcid
_h	oh.h	/^	Atom *_o, *_h;			\/\/ pointers to the atoms for easy access$/;"	m	class:Hydroxide
_h1	h2o.h	/^	Atom *_o, *_h1, *_h2;			\/\/ pointers to the atoms for easy access$/;"	m	class:Water
_h1	h3o.h	/^	Atom *_o, *_h1, *_h2, *_h3;			\/\/ pointers to the atoms for easy access$/;"	m	class:Hydronium
_h2	h2o.h	/^	Atom *_o, *_h1, *_h2;			\/\/ pointers to the atoms for easy access$/;"	m	class:Water
_h2	h3o.h	/^	Atom *_o, *_h1, *_h2, *_h3;			\/\/ pointers to the atoms for easy access$/;"	m	class:Hydronium
_h3	h3o.h	/^	Atom *_o, *_h1, *_h2, *_h3;			\/\/ pointers to the atoms for easy access$/;"	m	class:Hydronium
_histogram	histogram.h	/^	vector<int> _histogram;$/;"	m	class:Histogram
_id	ambermpisys.h	/^	int _id, _p;		\/\/ mpi rank of the process, and total number of processes$/;"	m	class:MPIMolSystem
_id	thread.h	/^	int _id;$/;"	m	class:Thread
_initialized	xyzfile.h	/^	bool _initialized;				\/\/ To tell wether or not a file has been loaded$/;"	m	class:XYZFile
_initstep	pdbfile.h	/^	int _initstep,				\/\/ the first frame listed in the file$/;"	m	class:PDBFile
_lastStep	xyzfile.h	/^	int _currentstep, _firstStep, _lastStep, _numSteps,$/;"	m	class:XYZFile
_laststep	pdbfile.h	/^		_laststep,$/;"	m	class:PDBFile
_loaded	forcefile.h	/^	bool			_loaded;$/;"	m	class:ForceFile
_loaded	pdbfile.h	/^	int _loaded;				\/\/ To tell wether or not a file has been loaded$/;"	m	class:PDBFile
_loaded	wannier.h	/^	bool			_loaded;	\/\/ tells wether or not the wannier file is being used or not (or if it exists)$/;"	m	class:WannierFile
_mass	atom.h	/^	double _mass,$/;"	m	class:Atom
_mass	molecule.h	/^	double			_mass;				\/\/ Total molecular mass$/;"	m	class:Molecule
_masses	topfile.h	/^	std::vector<double> _masses;			\/\/ atomic masses$/;"	m	class:TOPFile
_master	ambermpisys.h	/^	bool _master;	\/\/ sets the alias for the master$/;"	m	class:MPIMolSystem
_matrix	adjacencymatrix.h	/^	Bond_matrix		_matrix;	\/\/ the actual data structure for storing connection data$/;"	m	class:AdjacencyMatrix
_matrix	connectmatrix.h	/^	double **	_matrix;		\/\/ the actual data structure for storing connection data$/;"	m	class:AdjacencyMatrix
_matrix	matrixr.h	/^	Double_matrix	_matrix;$/;"	m	class:MatR
_max	dipoleparm.h	/^	double			_max[3];$/;"	m	class:WaterDipoleParms
_max	histogram.h	/^	double _max;$/;"	m	class:Histogram
_min	dipoleparm.h	/^	double			_min[3];			\/\/ min and max values of the bins for the three parameters$/;"	m	class:WaterDipoleParms
_min	histogram.h	/^	double _min;$/;"	m	class:Histogram
_molPlane	hno3.h	/^	VecR _molPlane;$/;"	m	class:Nitrate
_molPlane	hno3.h	/^	VecR _molPlane;$/;"	m	class:NitricAcid
_molecules	pdbfile.h	/^	vector<Molecule *> _molecules;		\/\/ The listing of the molecules in the file$/;"	m	class:PDBFile
_molid	atom.h	/^	int	   _molid;		\/\/ the molecule that contains this atom$/;"	m	class:Atom
_molnames	topfile.h	/^	std::vector<std::string> _molnames;		\/\/ molecule names$/;"	m	class:TOPFile
_molpointers	topfile.h	/^	std::vector<int>	_molpointers;	\/\/ prmtop pointers to each molecule (the location in the prmtop file, not c-style)$/;"	m	class:TOPFile
_mols	ambermpisys.h	/^	vector<Molecule> _mols;$/;"	m	class:MPIMolSystem
_mols	boxfiller.h	/^	vector<Molecule>	_mols;$/;"	m	class:BoxFiller
_mols	mdsystem.h	/^	Mol_ptr_vec		_mols;		\/\/ the molecules in the system$/;"	m	class:MDSystem
_molsizes	topfile.h	/^	std::vector<int>	_molsizes;		\/\/ the number of atoms in each molecule$/;"	m	class:TOPFile
_n	hno3.h	/^	Atom *_n, *_o1, *_o2, *_o3;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:Nitrate
_n	hno3.h	/^	Atom *_oh, *_n, *_h, *_o1, *_o2;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:NitricAcid
_name	atom.h	/^	std::string _name,$/;"	m	class:Atom
_name	molecule.h	/^	string			_name;				\/\/ some text ID or name for the molecule$/;"	m	class:Molecule
_no1	hno3.h	/^	VecR	_no1, _no2, _no3;		\/\/ vectors of the N-O bonds$/;"	m	class:Nitrate
_no2	hno3.h	/^	VecR	_no1, _no2, _no3;		\/\/ vectors of the N-O bonds$/;"	m	class:Nitrate
_no2dipole	hno3.h	/^	VecR _no2dipole;$/;"	m	class:NitricAcid
_no2wanniers	hno3.h	/^	std::vector<VecR> _no2wanniers;$/;"	m	class:NitricAcid
_no3	hno3.h	/^	VecR	_no1, _no2, _no3;		\/\/ vectors of the N-O bonds$/;"	m	class:Nitrate
_numAtoms	ambermpisys.h	/^	int			_numAtoms;		\/\/ number of atoms in the system - for all the nodes to know$/;"	m	class:MPIMolSystem
_numAtoms	pdbfile.h	/^	int	_numAtoms;				\/\/ total number of atoms in the system$/;"	m	class:PDBFile
_numAtoms	topfile.h	/^	int _numAtoms;$/;"	m	class:TOPFile
_numBins	histogram.h	/^	double _numBins;$/;"	m	class:Histogram
_numMols	ambermpisys.h	/^	int			_numMols;		\/\/ number of molecules in the system$/;"	m	class:MPIMolSystem
_numMols	pdbfile.h	/^	int _numMols;$/;"	m	class:PDBFile
_numMols	topfile.h	/^	int _numMols;$/;"	m	class:TOPFile
_numSteps	xyzfile.h	/^	int _currentstep, _firstStep, _lastStep, _numSteps,$/;"	m	class:XYZFile
_numTimeSteps	mdsystem.h	/^	int				_numTimeSteps;		\/\/ number of timesteps in the MD data files$/;"	m	class:MDSystem
_num_bins	dipoleparm.h	/^	int 			_num_bins[3];		\/\/ number of bins for each of the three parameters$/;"	m	class:WaterDipoleParms
_numatoms	xyzfile.h	/^		_numatoms;				\/\/ total number of centers to process from the file for the frame$/;"	m	class:XYZFile
_o	h2o.h	/^	Atom *_o, *_h1, *_h2;			\/\/ pointers to the atoms for easy access$/;"	m	class:Water
_o	h3o.h	/^	Atom *_o, *_h1, *_h2, *_h3;			\/\/ pointers to the atoms for easy access$/;"	m	class:Hydronium
_o	oh.h	/^	Atom *_o, *_h;			\/\/ pointers to the atoms for easy access$/;"	m	class:Hydroxide
_o1	hno3.h	/^	Atom *_n, *_o1, *_o2, *_o3;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:Nitrate
_o1	hno3.h	/^	Atom *_oh, *_n, *_h, *_o1, *_o2;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:NitricAcid
_o2	hno3.h	/^	Atom *_n, *_o1, *_o2, *_o3;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:Nitrate
_o2	hno3.h	/^	Atom *_oh, *_n, *_h, *_o1, *_o2;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:NitricAcid
_o3	hno3.h	/^	Atom *_n, *_o1, *_o2, *_o3;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:Nitrate
_oh	hno3.h	/^	Atom *_oh, *_n, *_h, *_o1, *_o2;		\/\/ Pointers to the various atoms in the nitric acid. These are static for no$/;"	m	class:NitricAcid
_oh	oh.h	/^	VecR _oh;				\/\/ The OH bond vector$/;"	m	class:Hydroxide
_oh1	h2o.h	/^	VecR _oh1, _oh2;				\/\/ Both of the OH vectors$/;"	m	class:Water
_oh1	h3o.h	/^	VecR _oh1, _oh2, _oh3;				\/\/ Both of the OH vectors$/;"	m	class:Hydronium
_oh2	h2o.h	/^	VecR _oh1, _oh2;				\/\/ Both of the OH vectors$/;"	m	class:Water
_oh2	h3o.h	/^	VecR _oh1, _oh2, _oh3;				\/\/ Both of the OH vectors$/;"	m	class:Hydronium
_oh3	h3o.h	/^	VecR _oh1, _oh2, _oh3;				\/\/ Both of the OH vectors$/;"	m	class:Hydronium
_p	ambermpisys.h	/^	int _id, _p;		\/\/ mpi rank of the process, and total number of processes$/;"	m	class:MPIMolSystem
_p	moritasfg2002.h	/^	VecR					_p;		\/\/ vector of dipoles of all the waters$/;"	m	class:MoritaSFG
_params	boxfiller.h	/^	FILE * _params;$/;"	m	class:BoxFiller
_parsed	xyzsystem.h	/^	bool _parsed;$/;"	m	class:XYZSystem
_path	pdbfile.h	/^	string _path;$/;"	m	class:PDBFile
_path	xyzfile.h	/^	std::string _path;$/;"	m	class:XYZFile
_pdb	boxfiller.h	/^	PDBFile _pdb;		\/\/ pdb file containing all the atoms\/molecules$/;"	m	class:BoxFiller
_pmolecule	atom.h	/^	Molecule * _pmolecule;$/;"	m	class:Atom
_position	atom.h	/^	VecR _position;			\/\/ Particle position$/;"	m	class:Atom
_positions	ambermpisys.h	/^	double * _positions;$/;"	m	class:MPIMolSystem
_r	dipolefieldtensor.h	/^	double const * _r;	\/\/ distance vector (x,y,z) between 2 molecules$/;"	m	class:DipoleFieldTensor
_residue	atom.h	/^		   _residue;$/;"	m	class:Atom
_residueNames	boxfiller.h	/^	vector<string>	_residueNames;$/;"	m	class:BoxFiller
_residueNum	boxfiller.h	/^	vector<int>		_residueNum;$/;"	m	class:BoxFiller
_return	thread.h	/^	void *_return;$/;"	m	class:Thread
_set	hno3.h	/^	bool _set;								\/\/ to let us know if the atom have been set in the molecule$/;"	m	class:Nitrate
_set	hno3.h	/^	bool _set;								\/\/ to let us know if the atom have been set in the molecule$/;"	m	class:NitricAcid
_set	molecule.h	/^	bool			_set;				\/\/ just a little helper to see if the atoms of the molecule have been set or for any other special purpose$/;"	m	class:Molecule
_set	watersfg.h	/^	bool 	_set;			\/\/ set when the water molecule has already gone through prelim calculations that don't need to be repeated for each calculation of Beta$/;"	m	class:SFGCalculator
_size	adjacencymatrix.h	/^	unsigned int 	_size;$/;"	m	class:AdjacencyMatrix
_size	atom.h	/^	static VecR _size;				\/\/ system size$/;"	m	class:Atom
_size	crdfile.h	/^	int 			_size;		\/\/ number of atoms in the system$/;"	m	class:CRDFile
_size	forcefile.h	/^	int 			_size;		\/\/ number of atoms in the system$/;"	m	class:ForceFile
_size	wannier.h	/^	int 			_size;		\/\/ number of lines to process from the wannier file per frame$/;"	m	class:WannierFile
_spacing	boxfiller.h	/^	double	_spacing;$/;"	m	class:BoxFiller
_stat	ambermpisys.h	/^	MPI_Status _stat;$/;"	m	class:MPIMolSystem
_sys	ambermpisys.h	/^	AmberSystem * _sys;			\/\/ the amber system object for the master node$/;"	m	class:MPIMolSystem
_sys	wateranalyzer.h	/^	WaterSystem&			_sys;		\/\/ the water system that will be used for calculations$/;"	m	class:WaterAnalyzer
_sys_type	graph.h	/^	std::string	_sys_type;$/;"	m	class:BondGraph
_tensor	dipolefieldtensor.h	/^	double _tensor[9];	\/\/ The internal elements of the dipole field tensor$/;"	m	class:DipoleFieldTensor
_thread	thread.h	/^	pthread_t	* _thread;$/;"	m	class:Thread
_topfile	ambersystem.h	/^	TOPFile		_topfile;$/;"	m	class:AmberSystem
_topfile	topfile.h	/^	FILE * _topfile;			\/\/ The associated topology file output by AMBER$/;"	m	class:TOPFile
_unparsed	xyzsystem.h	/^	Atom_ptr_vec _unparsed;$/;"	m	class:XYZSystem
_voh	hno3.h	/^	VecR _voh;$/;"	m	class:NitricAcid
_w1	watersfg.h	/^	double _w1, _w2;		\/\/ Shifted frequency values from the gas phase vibration frequency$/;"	m	class:SFGCalculator
_w2	watersfg.h	/^	double _w1, _w2;		\/\/ Shifted frequency values from the gas phase vibration frequency$/;"	m	class:SFGCalculator
_wa	watersfg.h	/^	double _ws, _wa;		\/\/ The two normal mode (symmetric and antisymmetric) frequencies of the water molecule$/;"	m	class:SFGCalculator
_wanniers	molecule.h	/^	std::vector<VecR>	_wanniers;			\/\/ the wannier centers in the molecule$/;"	m	class:Molecule
_wanniers	xyzsystem.h	/^	WannierFile 		_wanniers;		\/\/ The wannier centers$/;"	m	class:XYZSystem
_wats	moritasfg2002.h	/^	std::vector<Water *>	_wats;	\/\/ waters of the system$/;"	m	class:MoritaSFG
_worldcomm	ambermpisys.h	/^	MPI_Comm _worldcomm;$/;"	m	class:MPIMolSystem
_ws	watersfg.h	/^	double _ws, _wa;		\/\/ The two normal mode (symmetric and antisymmetric) frequencies of the water molecule$/;"	m	class:SFGCalculator
_x	molecule.h	/^	VecR			_x, _y, _z;			\/\/ molecular frame axes$/;"	m	class:Molecule
_y	molecule.h	/^	VecR			_x, _y, _z;			\/\/ molecular frame axes$/;"	m	class:Molecule
_z	molecule.h	/^	VecR			_x, _y, _z;			\/\/ molecular frame axes$/;"	m	class:Molecule
angbins	watersystem.h	/^	int		angbins;$/;"	m	class:WaterSystem
angbins	watersystem.h	/^	int angbins;$/;"	m	struct:WaterSystemParams
angmax	watersystem.h	/^	double 	angmin, angmax, angres;$/;"	m	class:WaterSystem
angmax	watersystem.h	/^	double angmin, angmax, angres;$/;"	m	struct:WaterSystemParams
angmin	watersystem.h	/^	double 	angmin, angmax, angres;$/;"	m	class:WaterSystem
angmin	watersystem.h	/^	double angmin, angmax, angres;$/;"	m	struct:WaterSystemParams
angres	watersystem.h	/^	double 	angmin, angmax, angres;$/;"	m	class:WaterSystem
angres	watersystem.h	/^	double angmin, angmax, angres;$/;"	m	struct:WaterSystemParams
atom	bondgraph.h	/^	Atom * atom;$/;"	m	struct:VertexProperties
atom	graph.h	/^	Atom * atom;$/;"	m	struct:VertexProperties
avg	watersystem.h	/^	bool avg;$/;"	m	struct:WaterSystemParams
axis	watersystem.h	/^	coord axis;$/;"	m	class:WaterSystem
axis	watersystem.h	/^	coord axis;$/;"	m	struct:WaterSystemParams
b_length	graph.h	/^	static PropertyMap<double,EdgeProperties>::Type 		b_length;$/;"	m	class:BondGraph
b_type	graph.h	/^	static PropertyMap<bondtype,EdgeProperties>::Type 		b_type;$/;"	m	class:BondGraph
bond	bond.h	/^	bondtype bond;	 	\/\/ bond type (covalent, hydrogen-bond, or unbonded)$/;"	m	class:Bond
bondlength	bond.h	/^	double	bondlength;	\/\/ bond length$/;"	m	class:Bond
bondtype	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	t	typeref:enum:__anon4
bondtype	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	t	typeref:enum:__anon2
bondtype	connectmatrix.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded} bondtype;$/;"	t	typeref:enum:__anon6
bondtype	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	t	typeref:enum:__anon8
btype	bondgraph.h	/^	bondtype	btype;$/;"	m	struct:EdgeProperties
btype	graph.h	/^	bondtype	btype;$/;"	m	struct:EdgeProperties
coord	vecr.h	/^enum coord {x=0, y=1, z=2};$/;"	g
coord_map	bond.h	/^typedef std::map<coordination, std::string> coord_map;$/;"	t
coord_map	connectmatrix.h	/^typedef std::map<coordination, string> coord_map;$/;"	t
coord_map	graph.h	/^typedef std::map<coordination, std::string> coord_map;$/;"	t
coordination	bond.h	/^} coordination;$/;"	t	typeref:enum:__anon3
coordination	bondgraph.h	/^} coordination;$/;"	t	typeref:enum:__anon1
coordination	connectmatrix.h	/^} coordination;$/;"	t	typeref:enum:__anon5
coordination	graph.h	/^} coordination;$/;"	t	typeref:enum:__anon7
covalent	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon4
covalent	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	e	enum:__anon2
covalent	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon8
distance	bondgraph.h	/^	double 		distance;$/;"	m	struct:EdgeProperties
distance	graph.h	/^	double 		distance;$/;"	m	struct:EdgeProperties
edges	node.h	/^	Edge_ptr_list edges;		\/\/ all the edges connecting to this node$/;"	m	class:Node
element	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	g
eof	ambersystem.h	/^	bool eof () { return _coords.eof(); }$/;"	f	class:AmberSystem
eof	crdfile.h	/^	bool eof () 	const { return _eof; }$/;"	f	class:CRDFile
eof	forcefile.h	/^	bool eof () 	{ return _eof; }$/;"	f	class:ForceFile
eof	wannier.h	/^	bool eof () 	const { return _eof; }		\/\/ have we reached the end of the file?$/;"	f	class:WannierFile
fct_ptr	thread.h	/^typedef void* (*fct_ptr)(void *);$/;"	t
graph	watersystem.h	/^	BondGraph	graph;$/;"	m	class:WaterSystem
hbond	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon4
hbond	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	e	enum:__anon2
hbond	connectmatrix.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded} bondtype;$/;"	e	enum:__anon6
hbond	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon8
int_atoms	watersystem.h	/^	Atom_ptr_vec	int_atoms;		\/\/ interfacial water atoms (or as above)$/;"	m	class:WaterSystem
int_high	watersystem.h	/^	double int_low, int_high, middle;		\/\/ the positions of analysis cutoffs$/;"	m	class:WaterSystem
int_low	watersystem.h	/^	double int_low, int_high, middle;		\/\/ the positions of analysis cutoffs$/;"	m	class:WaterSystem
int_mols	watersystem.h	/^	Mol_ptr_vec int_mols;$/;"	m	class:WaterSystem
int_wats	watersystem.h	/^	Water_ptr_vec	int_wats;		\/\/ interfacial waters, or just all the waters in the system depending on the function call$/;"	m	class:WaterSystem
k0	watersfg.h	/^const double k0	=	0.548;		\/\/ atomic units (force\/length) Eh\/ao\/ao$/;"	v
l	watersfg.h	/^const double l	=	-1.991;		\/\/ atomic units (force\/length^2)	Eh\/ao\/ao\/ao... yikes$/;"	v
maxdistance	rdf.h	5;"	d
middle	watersystem.h	/^	double int_low, int_high, middle;		\/\/ the positions of analysis cutoffs$/;"	m	class:WaterSystem
name	graph.h	/^	std::string name;$/;"	m	struct:VertexProperties
next	bondgraph.h	/^	MyVertex_it vi, vi_end, next;$/;"	m	class:BondGraph
nhbond	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon4
nhbond	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	e	enum:__anon2
nhbond	connectmatrix.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded} bondtype;$/;"	e	enum:__anon6
nhbond	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon8
nobond	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon4
nobond	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	e	enum:__anon2
nobond	connectmatrix.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded} bondtype;$/;"	e	enum:__anon6
nobond	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon8
numAtoms	pdbfile.h	/^	int numAtoms () { return _numAtoms; }$/;"	f	class:PDBFile
numCarbonChains	carbonchain.h	/^		static int numCarbonChains;			\/\/ total number of waters in the system$/;"	m	class:CarbonChain
numDecanes	decane.h	/^		static int numDecanes;			\/\/ total number of waters in the system$/;"	m	class:Decane
numHydroniums	h3o.h	/^	static int numHydroniums;			\/\/ total number of waters in the system$/;"	m	class:Hydronium
numHydroxides	oh.h	/^	static int numHydroxides;			\/\/ total number of waters in the system$/;"	m	class:Hydroxide
numMolecules	molecule.h	/^	static int numMolecules;$/;"	m	class:Molecule
numMols	pdbfile.h	/^	int numMols () { return _numMols; }$/;"	f	class:PDBFile
numNitrates	hno3.h	/^	static int numNitrates;$/;"	m	class:Nitrate
numNitricAcids	hno3.h	/^	static int numNitricAcids;$/;"	m	class:NitricAcid
numWaters	h2o.h	/^	static int numWaters;			\/\/ total number of waters in the system$/;"	m	class:Water
num_bonds	bond.h	/^	static int num_bonds;$/;"	m	class:Bond
num_nodes	node.h	/^	static int num_nodes;$/;"	m	class:Node
num_threads	thread.h	/^	static int num_threads;$/;"	m	class:Thread
num_threads	thread.h	/^template <class T> int Thread<T>::num_threads = 0;$/;"	m	class:Thread
ohbond	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon4
ohbond	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	e	enum:__anon2
ohbond	connectmatrix.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded} bondtype;$/;"	e	enum:__anon6
ohbond	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon8
operator ++	histogram.h	/^	int 	operator++ (int bin) { _histogram[bin]++; }$/;"	f	class:Histogram
operator --	histogram.h	/^	int 	operator-- (int bin) { _histogram[bin]--; }$/;"	f	class:Histogram
operator =	matrixr.h	/^	void 	operator= (const MatR& input) {				\/\/ assignment$/;"	f	class:MatR
operator []	crdfile.h	/^	VecR& operator[] (int index) { return _coords[index]; }$/;"	f	class:CRDFile
operator []	forcefile.h	/^	VecR& operator[] (int index) { return _forces[index]; }$/;"	f	class:ForceFile
operator []	histogram.h	/^	int		operator[] (int bin) { return _histogram[bin]; }$/;"	f	class:Histogram
operator []	histogram.h	/^	void	operator[] (double value) { _histogram[this->Bin(value)]++; }$/;"	f	class:Histogram
operator []	mdsystem.h	/^	Atom * operator[] (int index) { return _atoms[index]; }$/;"	f	class:MDSystem
operator []	molecule.h	/^	Atom * operator[] (int index) const { return _atoms[index]; }	\/\/ retrieve an atom by array index$/;"	f	class:Molecule
operator []	pdbfile.h	/^	Molecule *operator[] (int index) { return _molecules[index]; }$/;"	f	class:PDBFile
operator []	wannier.h	/^	VecR& operator[] (int index) { return _coords[index]; }$/;"	f	class:WannierFile
operator []	xyzfile.h	/^	Atom * operator[] (int index) { return _atoms[index]; }$/;"	f	class:XYZFile
operator []	xyzsystem.h	/^	Atom * operator[] (int index) {$/;"	f	class:XYZSystem
output	watersystem.h	/^	FILE * output;$/;"	m	class:WaterSystem
output	watersystem.h	/^	FILE * output;$/;"	m	struct:WaterSystemParams
output_filename	watersystem.h	/^	std::string output_filename;$/;"	m	class:WaterSystem
output_filename	watersystem.h	/^	std::string output_filename;$/;"	m	struct:WaterSystemParams
output_freq	watersystem.h	/^	int	output_freq;$/;"	m	class:WaterSystem
output_freq	watersystem.h	/^	int output_freq;$/;"	m	struct:WaterSystemParams
pbcflip	watersystem.h	/^	double	pbcflip;$/;"	m	class:WaterSystem
pbcflip	watersystem.h	/^	double pbcflip;$/;"	m	struct:WaterSystemParams
posbins	watersystem.h	/^	int		posbins;$/;"	m	class:WaterSystem
posbins	watersystem.h	/^	int posbins;$/;"	m	struct:WaterSystemParams
position	bondgraph.h	/^	VecR position;$/;"	m	struct:VertexProperties
position	graph.h	/^	VecR position;$/;"	m	struct:VertexProperties
posmax	watersystem.h	/^	double	posmin, posmax, posres;$/;"	m	class:WaterSystem
posmax	watersystem.h	/^	double posmin, posmax, posres;$/;"	m	struct:WaterSystemParams
posmin	watersystem.h	/^	double	posmin, posmax, posres;$/;"	m	class:WaterSystem
posmin	watersystem.h	/^	double posmin, posmax, posres;$/;"	m	struct:WaterSystemParams
posres	watersystem.h	/^	double	posmin, posmax, posres;$/;"	m	class:WaterSystem
posres	watersystem.h	/^	double posmin, posmax, posres;$/;"	m	struct:WaterSystemParams
ref_axis	watersystem.h	/^	VecR ref_axis;$/;"	m	class:WaterSystem
ref_axis	watersystem.h	/^	VecR ref_axis;$/;"	m	struct:WaterSystemParams
restart	watersystem.h	/^	int timesteps, restart;$/;"	m	struct:WaterSystemParams
restart	watersystem.h	/^	unsigned int timestep, restart;$/;"	m	class:WaterSystem
size	crdfile.h	/^	int size () 	const { return _size; }$/;"	f	class:CRDFile
size	forcefile.h	/^	int size () 	{ return _size; }$/;"	f	class:ForceFile
size	mdsystem.h	/^	const int size () const { return (int)_atoms.size(); }$/;"	f	class:MDSystem
size	molecule.h	/^	int size () const				{ return _atoms.size(); }$/;"	f	class:Molecule
size	pdbfile.h	/^	int size () { return _numAtoms; }$/;"	f	class:PDBFile
size	wannier.h	/^	unsigned int size () 	const { return _size; }$/;"	f	class:WannierFile
size	xyzfile.h	/^	size_t size () const { return _atoms.size(); }$/;"	f	class:XYZFile
sys	watersystem.h	/^	T * sys;$/;"	m	class:WaterSystem
timestep	watersystem.h	/^	unsigned int timestep, restart;$/;"	m	class:WaterSystem
timesteps	watersystem.h	/^	int timesteps, restart;$/;"	m	struct:WaterSystemParams
timesteps	watersystem.h	/^	unsigned int timesteps;$/;"	m	class:WaterSystem
trajectory	wateranalyzer.h	/^typedef vector<double> trajectory;$/;"	t
unbonded	bond.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon4
unbonded	bondgraph.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded, covalent} bondtype;$/;"	e	enum:__anon2
unbonded	connectmatrix.h	/^typedef enum {ohbond, nobond, nhbond, hbond, unbonded} bondtype;$/;"	e	enum:__anon6
unbonded	graph.h	/^typedef enum {unbonded, nobond, nhbond, hbond, ohbond, covalent} bondtype;$/;"	e	enum:__anon8
v_atom	graph.h	/^	static PropertyMap<Atom *,VertexProperties>::Type 		v_atom;$/;"	m	class:BondGraph
v_name	graph.h	/^	static PropertyMap<std::string,VertexProperties>::Type	v_name;$/;"	m	class:BondGraph
v_position	graph.h	/^	static PropertyMap<VecR,VertexProperties>::Type 		v_position;$/;"	m	class:BondGraph
vi	bondgraph.h	/^	MyVertex_it vi, vi_end, next;$/;"	m	class:BondGraph
vi_end	bondgraph.h	/^	MyVertex_it vi, vi_end, next;$/;"	m	class:BondGraph
x	vecr.h	/^enum coord {x=0, y=1, z=2};$/;"	e	enum:coord
xx	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
xy	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
xz	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
y	vecr.h	/^enum coord {x=0, y=1, z=2};$/;"	e	enum:coord
yx	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
yy	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
yz	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
z	vecr.h	/^enum coord {x=0, y=1, z=2};$/;"	e	enum:coord
zx	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
zy	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
zz	matrixr.h	/^enum element {xx=0, yx=1, zx=2, xy=3, yy=4, zy=5, xz=6, yz=7, zz=8};$/;"	e	enum:element
~MPIMolSystem	ambermpisys.h	/^MPIMolSystem::~MPIMolSystem () {$/;"	f	class:MPIMolSystem
~MatR	matrixr.h	/^	~MatR () {};$/;"	f	class:MatR
~WaterSystem	watersystem.h	/^WaterSystem<T>::~WaterSystem () {$/;"	f	class:WaterSystem
