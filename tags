!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddEdge	graph.cpp	/^Edge * Graph::AddEdge (Node * u, Node * v) {$/;"	f	class:Graph
AddEdge	graph.cpp	/^void Node::AddEdge (Edge * e) {$/;"	f	class:Node
AddNode	graph.cpp	/^Node * Graph::AddNode () {$/;"	f	class:Graph
Adjacent	graph.cpp	/^Node * Node::Adjacent (const Edge const * e) const {$/;"	f	class:Node
Adjacent	graph.h	/^	Node_ptr_list Adjacent (Node * u) { return (u->AdjacentNodes()); }$/;"	f	class:Graph
AdjacentNodes	graph.cpp	/^Node_ptr_list Graph::AdjacentNodes (const Node const * u) const {$/;"	f	class:Graph
Clear	graph.cpp	/^void Graph::Clear () {$/;"	f	class:Graph
Edge	graph.cpp	/^Edge * Graph::Edge (Node * u, Node * v) {$/;"	f	class:Graph
Edge	graph.cpp	/^Edge::Edge () {$/;"	f	class:Edge
Edge	graph.cpp	/^Edge::Edge (Node * i, Node * j) {$/;"	f	class:Edge
Edge	graph.h	/^class Edge {$/;"	c
Edge_it	graph.h	/^typedef std::list<Edge *>::iterator Edge_it;$/;"	t
Edge_ptr_list	graph.h	/^typedef std::list<Edge *> Edge_ptr_list;$/;"	t
Edges	graph.h	/^	Edge_ptr_list& Edges () { return _edges; }$/;"	f	class:Graph
GRAPH_H_	graph.h	2;"	d
Graph	graph.cpp	/^Graph::Graph () {$/;"	f	class:Graph
Graph	graph.h	/^class Graph {$/;"	c
Node	graph.cpp	/^Node::Node () {$/;"	f	class:Node
Node	graph.h	/^class Node {$/;"	c
Node_it	graph.h	/^typedef std::list<Node *>::iterator Node_it;$/;"	t
Node_ptr_list	graph.h	/^typedef std::list<Node *> Node_ptr_list;$/;"	t
Nodes	graph.cpp	/^std::vector<Node *> Edge::Nodes () const {$/;"	f	class:Edge
Nodes	graph.h	/^	Node_ptr_list& Nodes () { return _nodes; }$/;"	f	class:Graph
RemoveEdge	graph.cpp	/^void Graph::RemoveEdge (Edge * e) {$/;"	f	class:Graph
RemoveEdge	graph.cpp	/^void Node::RemoveEdge (Edge * e) {$/;"	f	class:Node
RemoveEdges	graph.cpp	/^void Node::RemoveEdges () {$/;"	f	class:Node
RemoveNode	graph.cpp	/^void Graph::RemoveNode (Node * u) {$/;"	f	class:Graph
_edges	graph.h	/^	Edge_ptr_list		_edges;$/;"	m	class:Graph
_nodes	graph.h	/^	Node_ptr_list		_nodes;$/;"	m	class:Graph
edges	graph.h	/^	Edge_ptr_list edges;		\/\/ all the edges connecting to this node$/;"	m	class:Node
num_edges	graph.cpp	/^int Edge::num_edges = 0;$/;"	m	class:Edge	file:
num_edges	graph.h	/^	static int num_edges;$/;"	m	class:Edge
num_nodes	graph.cpp	/^int Node::num_nodes = 0;$/;"	m	class:Node	file:
num_nodes	graph.h	/^	static int num_nodes;$/;"	m	class:Node
u	graph.h	/^	Node * u;$/;"	m	class:Edge
v	graph.h	/^	Node * v;$/;"	m	class:Edge
~Edge	graph.cpp	/^Edge::~Edge () {$/;"	f	class:Edge
~Graph	graph.cpp	/^Graph::~Graph () {$/;"	f	class:Graph
~Node	graph.cpp	/^Node::~Node () {$/;"	f	class:Node
